'\" t
.TH "SD_JOURNAL_GET_REALTIME_USEC" "3" "" "systemd 248" "sd_journal_get_realtime_usec"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
sd_journal_get_realtime_usec, sd_journal_get_monotonic_usec \- Read timestamps from the current journal entry
.SH "SYNOPSIS"
.sp
.ft B
.nf
#include <systemd/sd\-journal\&.h>
.fi
.ft
.HP \w'int\ sd_journal_get_realtime_usec('u
.BI "int sd_journal_get_realtime_usec(sd_journal\ *" "j" ", uint64_t\ *" "usec" ");"
.HP \w'int\ sd_journal_get_monotonic_usec('u
.BI "int sd_journal_get_monotonic_usec(sd_journal\ *" "j" ", uint64_t\ *" "usec" ", sd_id128_t\ *" "boot_id" ");"
.SH "DESCRIPTION"
.PP
\fBsd_journal_get_realtime_usec()\fR
gets the realtime (wallclock) timestamp of the current journal entry\&. It takes two arguments: the journal context object and a pointer to a 64\-bit unsigned integer to store the timestamp in\&. The timestamp is in microseconds since the epoch, i\&.e\&.
\fBCLOCK_REALTIME\fR\&.
.PP
\fBsd_journal_get_monotonic_usec()\fR
gets the monotonic timestamp of the current journal entry\&. It takes three arguments: the journal context object, a pointer to a 64\-bit unsigned integer to store the timestamp in, as well as a 128\-bit ID buffer to store the boot ID of the monotonic timestamp\&. The timestamp is in microseconds since boot\-up of the specific boot, i\&.e\&.
\fBCLOCK_MONOTONIC\fR\&. Since the monotonic clock begins new with every reboot, it only defines a well\-defined point in time when used together with an identifier identifying the boot\&. See
\fBsd_id128_get_boot\fR(3)
for more information\&. If the boot ID parameter is passed
\fBNULL\fR, the function will fail if the monotonic timestamp of the current entry is not of the current system boot\&.
.PP
Note that these functions will not work before
\fBsd_journal_next\fR(3)
(or related call) has been called at least once, in order to position the read pointer at a valid entry\&.
.SH "RETURN VALUE"
.PP
\fBsd_journal_get_realtime_usec()\fR
and
\fBsd_journal_get_monotonic_usec()\fR
returns 0 on success or a negative errno\-style error code\&. If the boot ID parameter was passed
\fBNULL\fR
and the monotonic timestamp of the current journal entry is not of the current system boot,
\fB\-ESTALE\fR
is returned by
\fBsd_journal_get_monotonic_usec()\fR\&.
.SH "NOTES"
.PP
All functions listed here are thread\-agnostic and only a single specific thread may operate on a given object during its entire lifetime\&. It\*(Aqs safe to allocate multiple independent objects and use each from a specific thread in parallel\&. However, it\*(Aqs not safe to allocate such an object in one thread, and operate or free it from any other, even if locking is used to ensure these threads don\*(Aqt operate on it at the very same time\&.
.PP
These APIs are implemented as a shared library, which can be compiled and linked to with the
\fBlibsystemd\fR\ \&\fBpkg-config\fR(1)
file\&.
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsd-journal\fR(3),
\fBsd_journal_open\fR(3),
\fBsd_journal_next\fR(3),
\fBsd_journal_get_data\fR(3),
\fBsd_id128_get_boot\fR(3),
\fBclock_gettime\fR(2),
\fBsd_journal_get_cutoff_realtime_usec\fR(3)
