'\" t
.TH "SYSTEMD\&.SERVICE" "5" "" "systemd 248" "systemd.service"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd.service \- Service unit configuration
.SH "SYNOPSIS"
.PP
\fIservice\fR\&.service
.SH "DESCRIPTION"
.PP
A unit configuration file whose name ends in
"\&.service"
encodes information about a process controlled and supervised by systemd\&.
.PP
This man page lists the configuration options specific to this unit type\&. See
\fBsystemd.unit\fR(5)
for the common options of all unit configuration files\&. The common configuration items are configured in the generic [Unit] and [Install] sections\&. The service specific configuration options are configured in the [Service] section\&.
.PP
Additional options are listed in
\fBsystemd.exec\fR(5), which define the execution environment the commands are executed in, and in
\fBsystemd.kill\fR(5), which define the way the processes of the service are terminated, and in
\fBsystemd.resource-control\fR(5), which configure resource control settings for the processes of the service\&.
.PP
If a service is requested under a certain name but no unit configuration file is found, systemd looks for a SysV init script by the same name (with the
\&.service
suffix removed) and dynamically creates a service unit from that script\&. This is useful for compatibility with SysV\&. Note that this compatibility is quite comprehensive but not 100%\&. For details about the incompatibilities, see the
\m[blue]\fBIncompatibilities with SysV\fR\m[]\&\s-2\u[1]\d\s+2
document\&.
.PP
The
\fBsystemd-run\fR(1)
command allows creating
\&.service
and
\&.scope
units dynamically and transiently from the command line\&.
.SH "SERVICE TEMPLATES"
.PP
It is possible for
\fBsystemd\fR
services to take a single argument via the
"\fIservice\fR@\fIargument\fR\&.service"
syntax\&. Such services are called "instantiated" services, while the unit definition without the
\fIargument\fR
parameter is called a "template"\&. An example could be a
dhcpcd@\&.service
service template which takes a network interface as a parameter to form an instantiated service\&. Within the service file, this parameter or "instance name" can be accessed with %\-specifiers\&. See
\fBsystemd.unit\fR(5)
for details\&.
.SH "AUTOMATIC DEPENDENCIES"
.SS "Implicit Dependencies"
.PP
The following dependencies are implicitly added:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Services with
\fIType=dbus\fR
set automatically acquire dependencies of type
\fIRequires=\fR
and
\fIAfter=\fR
on
dbus\&.socket\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Socket activated services are automatically ordered after their activating
\&.socket
units via an automatic
\fIAfter=\fR
dependency\&. Services also pull in all
\&.socket
units listed in
\fISockets=\fR
via automatic
\fIWants=\fR
and
\fIAfter=\fR
dependencies\&.
.RE
.PP
Additional implicit dependencies may be added as result of execution and resource control parameters as documented in
\fBsystemd.exec\fR(5)
and
\fBsystemd.resource-control\fR(5)\&.
.SS "Default Dependencies"
.PP
The following dependencies are added unless
\fIDefaultDependencies=no\fR
is set:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Service units will have dependencies of type
\fIRequires=\fR
and
\fIAfter=\fR
on
sysinit\&.target, a dependency of type
\fIAfter=\fR
on
basic\&.target
as well as dependencies of type
\fIConflicts=\fR
and
\fIBefore=\fR
on
shutdown\&.target\&. These ensure that normal service units pull in basic system initialization, and are terminated cleanly prior to system shutdown\&. Only services involved with early boot or late system shutdown should disable this option\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Instanced service units (i\&.e\&. service units with an
"@"
in their name) are assigned by default a per\-template slice unit (see
\fBsystemd.slice\fR(5)), named after the template unit, containing all instances of the specific template\&. This slice is normally stopped at shutdown, together with all template instances\&. If that is not desired, set
\fIDefaultDependencies=no\fR
in the template unit, and either define your own per\-template slice unit file that also sets
\fIDefaultDependencies=no\fR, or set
\fISlice=system\&.slice\fR
(or another suitable slice) in the template unit\&. Also see
\fBsystemd.resource-control\fR(5)\&.
.RE
.SH "OPTIONS"
.PP
Service files must include a [Service] section, which carries information about the service and the process it supervises\&. A number of options that may be used in this section are shared with other unit types\&. These options are documented in
\fBsystemd.exec\fR(5),
\fBsystemd.kill\fR(5)
and
\fBsystemd.resource-control\fR(5)\&. The options specific to the [Service] section of service units are the following:
.PP
\fIType=\fR
.RS 4
Configures the process start\-up type for this service unit\&. One of
\fBsimple\fR,
\fBexec\fR,
\fBforking\fR,
\fBoneshot\fR,
\fBdbus\fR,
\fBnotify\fR
or
\fBidle\fR:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If set to
\fBsimple\fR
(the default if
\fIExecStart=\fR
is specified but neither
\fIType=\fR
nor
\fIBusName=\fR
are), the service manager will consider the unit started immediately after the main service process has been forked off\&. It is expected that the process configured with
\fIExecStart=\fR
is the main process of the service\&. In this mode, if the process offers functionality to other processes on the system, its communication channels should be installed before the service is started up (e\&.g\&. sockets set up by systemd, via socket activation), as the service manager will immediately proceed starting follow\-up units, right after creating the main service process, and before executing the service\*(Aqs binary\&. Note that this means
\fBsystemctl start\fR
command lines for
\fBsimple\fR
services will report success even if the service\*(Aqs binary cannot be invoked successfully (for example because the selected
\fIUser=\fR
doesn\*(Aqt exist, or the service binary is missing)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\fBexec\fR
type is similar to
\fBsimple\fR, but the service manager will consider the unit started immediately after the main service binary has been executed\&. The service manager will delay starting of follow\-up units until that point\&. (Or in other words:
\fBsimple\fR
proceeds with further jobs right after
\fBfork()\fR
returns, while
\fBexec\fR
will not proceed before both
\fBfork()\fR
and
\fBexecve()\fR
in the service process succeeded\&.) Note that this means
\fBsystemctl start\fR
command lines for
\fBexec\fR
services will report failure when the service\*(Aqs binary cannot be invoked successfully (for example because the selected
\fIUser=\fR
doesn\*(Aqt exist, or the service binary is missing)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If set to
\fBforking\fR, it is expected that the process configured with
\fIExecStart=\fR
will call
\fBfork()\fR
as part of its start\-up\&. The parent process is expected to exit when start\-up is complete and all communication channels are set up\&. The child continues to run as the main service process, and the service manager will consider the unit started when the parent process exits\&. This is the behavior of traditional UNIX services\&. If this setting is used, it is recommended to also use the
\fIPIDFile=\fR
option, so that systemd can reliably identify the main process of the service\&. systemd will proceed with starting follow\-up units as soon as the parent process exits\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Behavior of
\fBoneshot\fR
is similar to
\fBsimple\fR; however, the service manager will consider the unit up after the main process exits\&. It will then start follow\-up units\&.
\fIRemainAfterExit=\fR
is particularly useful for this type of service\&.
\fIType=\fR\fBoneshot\fR
is the implied default if neither
\fIType=\fR
nor
\fIExecStart=\fR
are specified\&. Note that if this option is used without
\fIRemainAfterExit=\fR
the service will never enter
"active"
unit state, but directly transition from
"activating"
to
"deactivating"
or
"dead"
since no process is configured that shall run continuously\&. In particular this means that after a service of this type ran (and which has
\fIRemainAfterExit=\fR
not set) it will not show up as started afterwards, but as dead\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Behavior of
\fBdbus\fR
is similar to
\fBsimple\fR; however, it is expected that the service acquires a name on the D\-Bus bus, as configured by
\fIBusName=\fR\&. systemd will proceed with starting follow\-up units after the D\-Bus bus name has been acquired\&. Service units with this option configured implicitly gain dependencies on the
dbus\&.socket
unit\&. This type is the default if
\fIBusName=\fR
is specified\&. A service unit of this type is considered to be in the activating state until the specified bus name is acquired\&. It is considered activated while the bus name is taken\&. Once the bus name is released the service is considered being no longer functional which has the effect that the service manager attempts to terminate any remaining processes belonging to the service\&. Services that drop their bus name as part of their shutdown logic thus should be prepared to receive a
\fBSIGTERM\fR
(or whichever signal is configured in
\fIKillSignal=\fR) as result\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Behavior of
\fBnotify\fR
is similar to
\fBexec\fR; however, it is expected that the service sends a notification message via
\fBsd_notify\fR(3)
or an equivalent call when it has finished starting up\&. systemd will proceed with starting follow\-up units after this notification message has been sent\&. If this option is used,
\fINotifyAccess=\fR
(see below) should be set to open access to the notification socket provided by systemd\&. If
\fINotifyAccess=\fR
is missing or set to
\fBnone\fR, it will be forcibly set to
\fBmain\fR\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Behavior of
\fBidle\fR
is very similar to
\fBsimple\fR; however, actual execution of the service program is delayed until all active jobs are dispatched\&. This may be used to avoid interleaving of output of shell services with the status output on the console\&. Note that this type is useful only to improve console output, it is not useful as a general unit ordering tool, and the effect of this service type is subject to a 5s timeout, after which the service program is invoked anyway\&.
.RE
.sp
It is generally recommended to use
\fIType=\fR\fBsimple\fR
for long\-running services whenever possible, as it is the simplest and fastest option\&. However, as this service type won\*(Aqt propagate service start\-up failures and doesn\*(Aqt allow ordering of other units against completion of initialization of the service (which for example is useful if clients need to connect to the service through some form of IPC, and the IPC channel is only established by the service itself \(em in contrast to doing this ahead of time through socket or bus activation or similar), it might not be sufficient for many cases\&. If so,
\fBnotify\fR
or
\fBdbus\fR
(the latter only in case the service provides a D\-Bus interface) are the preferred options as they allow service program code to precisely schedule when to consider the service started up successfully and when to proceed with follow\-up units\&. The
\fBnotify\fR
service type requires explicit support in the service codebase (as
\fBsd_notify()\fR
or an equivalent API needs to be invoked by the service at the appropriate time) \(em if it\*(Aqs not supported, then
\fBforking\fR
is an alternative: it supports the traditional UNIX service start\-up protocol\&. Finally,
\fBexec\fR
might be an option for cases where it is enough to ensure the service binary is invoked, and where the service binary itself executes no or little initialization on its own (and its initialization is unlikely to fail)\&. Note that using any type other than
\fBsimple\fR
possibly delays the boot process, as the service manager needs to wait for service initialization to complete\&. It is hence recommended not to needlessly use any types other than
\fBsimple\fR\&. (Also note it is generally not recommended to use
\fBidle\fR
or
\fBoneshot\fR
for long\-running services\&.)
.RE
.PP
\fIRemainAfterExit=\fR
.RS 4
Takes a boolean value that specifies whether the service shall be considered active even when all its processes exited\&. Defaults to
\fBno\fR\&.
.RE
.PP
\fIGuessMainPID=\fR
.RS 4
Takes a boolean value that specifies whether systemd should try to guess the main PID of a service if it cannot be determined reliably\&. This option is ignored unless
\fBType=forking\fR
is set and
\fBPIDFile=\fR
is unset because for the other types or with an explicitly configured PID file, the main PID is always known\&. The guessing algorithm might come to incorrect conclusions if a daemon consists of more than one process\&. If the main PID cannot be determined, failure detection and automatic restarting of a service will not work reliably\&. Defaults to
\fByes\fR\&.
.RE
.PP
\fIPIDFile=\fR
.RS 4
Takes a path referring to the PID file of the service\&. Usage of this option is recommended for services where
\fIType=\fR
is set to
\fBforking\fR\&. The path specified typically points to a file below
/run/\&. If a relative path is specified it is hence prefixed with
/run/\&. The service manager will read the PID of the main process of the service from this file after start\-up of the service\&. The service manager will not write to the file configured here, although it will remove the file after the service has shut down if it still exists\&. The PID file does not need to be owned by a privileged user, but if it is owned by an unprivileged user additional safety restrictions are enforced: the file may not be a symlink to a file owned by a different user (neither directly nor indirectly), and the PID file must refer to a process already belonging to the service\&.
.sp
Note that PID files should be avoided in modern projects\&. Use
\fBType=notify\fR
or
\fBType=simple\fR
where possible, which does not require use of PID files to determine the main process of a service and avoids needless forking\&.
.RE
.PP
\fIBusName=\fR
.RS 4
Takes a D\-Bus destination name that this service shall use\&. This option is mandatory for services where
\fIType=\fR
is set to
\fBdbus\fR\&. It is recommended to always set this property if known to make it easy to map the service name to the D\-Bus destination\&. In particular,
\fBsystemctl service\-log\-level/service\-log\-target\fR
verbs make use of this\&.
.RE
.PP
\fIExecStart=\fR
.RS 4
Commands with their arguments that are executed when this service is started\&. The value is split into zero or more command lines according to the rules described below (see section "Command Lines" below)\&.
.sp
Unless
\fIType=\fR
is
\fBoneshot\fR, exactly one command must be given\&. When
\fIType=oneshot\fR
is used, zero or more commands may be specified\&. Commands may be specified by providing multiple command lines in the same directive, or alternatively, this directive may be specified more than once with the same effect\&. If the empty string is assigned to this option, the list of commands to start is reset, prior assignments of this option will have no effect\&. If no
\fIExecStart=\fR
is specified, then the service must have
\fIRemainAfterExit=yes\fR
and at least one
\fIExecStop=\fR
line set\&. (Services lacking both
\fIExecStart=\fR
and
\fIExecStop=\fR
are not valid\&.)
.sp
For each of the specified commands, the first argument must be either an absolute path to an executable or a simple file name without any slashes\&. Optionally, this filename may be prefixed with a number of special characters:
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&1.\ \&Special executable prefixes
.TS
allbox tab(:);
lB lB.
T{
Prefix
T}:T{
Effect
T}
.T&
l l
l l
l l
l l
l l
l l.
T{
"@"
T}:T{
If the executable path is prefixed with "@", the second specified token will be passed as "argv[0]" to the executed process (instead of the actual filename), followed by the further arguments specified\&.
T}
T{
"\-"
T}:T{
If the executable path is prefixed with "\-", an exit code of the command normally considered a failure (i\&.e\&. non\-zero exit status or abnormal exit due to signal) is recorded, but has no further effect and is considered equivalent to success\&.
T}
T{
":"
T}:T{
If the executable path is prefixed with ":", environment variable substitution (as described by the "Command Lines" section below) is not applied\&.
T}
T{
"+"
T}:T{
If the executable path is prefixed with "+" then the process is executed with full privileges\&. In this mode privilege restrictions configured with \fIUser=\fR, \fIGroup=\fR, \fICapabilityBoundingSet=\fR or the various file system namespacing options (such as \fIPrivateDevices=\fR, \fIPrivateTmp=\fR) are not applied to the invoked command line (but still affect any other \fIExecStart=\fR, \fIExecStop=\fR, \&... lines)\&.
T}
T{
"!"
T}:T{
Similar to the "+" character discussed above this permits invoking command lines with elevated privileges\&. However, unlike "+" the "!" character exclusively alters the effect of \fIUser=\fR, \fIGroup=\fR and \fISupplementaryGroups=\fR, i\&.e\&. only the stanzas that affect user and group credentials\&. Note that this setting may be combined with \fIDynamicUser=\fR, in which case a dynamic user/group pair is allocated before the command is invoked, but credential changing is left to the executed process itself\&.
T}
T{
"!!"
T}:T{
This prefix is very similar to "!", however it only has an effect on systems lacking support for ambient process capabilities, i\&.e\&. without support for \fIAmbientCapabilities=\fR\&. It\*(Aqs intended to be used for unit files that take benefit of ambient capabilities to run processes with minimal privileges wherever possible while remaining compatible with systems that lack ambient capabilities support\&. Note that when "!!" is used, and a system lacking ambient capability support is detected any configured \fISystemCallFilter=\fR and \fICapabilityBoundingSet=\fR stanzas are implicitly modified, in order to permit spawned processes to drop credentials and capabilities themselves, even if this is configured to not be allowed\&. Moreover, if this prefix is used and a system lacking ambient capability support is detected \fIAmbientCapabilities=\fR will be skipped and not be applied\&. On systems supporting ambient capabilities, "!!" has no effect and is redundant\&.
T}
.TE
.sp 1
"@",
"\-",
":", and one of
"+"/"!"/"!!"
may be used together and they can appear in any order\&. However, only one of
"+",
"!",
"!!"
may be used at a time\&. Note that these prefixes are also supported for the other command line settings, i\&.e\&.
\fIExecStartPre=\fR,
\fIExecStartPost=\fR,
\fIExecReload=\fR,
\fIExecStop=\fR
and
\fIExecStopPost=\fR\&.
.sp
If more than one command is specified, the commands are invoked sequentially in the order they appear in the unit file\&. If one of the commands fails (and is not prefixed with
"\-"), other lines are not executed, and the unit is considered failed\&.
.sp
Unless
\fIType=forking\fR
is set, the process started via this command line will be considered the main process of the daemon\&.
.RE
.PP
\fIExecStartPre=\fR, \fIExecStartPost=\fR
.RS 4
Additional commands that are executed before or after the command in
\fIExecStart=\fR, respectively\&. Syntax is the same as for
\fIExecStart=\fR, except that multiple command lines are allowed and the commands are executed one after the other, serially\&.
.sp
If any of those commands (not prefixed with
"\-") fail, the rest are not executed and the unit is considered failed\&.
.sp
\fIExecStart=\fR
commands are only run after all
\fIExecStartPre=\fR
commands that were not prefixed with a
"\-"
exit successfully\&.
.sp
\fIExecStartPost=\fR
commands are only run after the commands specified in
\fIExecStart=\fR
have been invoked successfully, as determined by
\fIType=\fR
(i\&.e\&. the process has been started for
\fIType=simple\fR
or
\fIType=idle\fR, the last
\fIExecStart=\fR
process exited successfully for
\fIType=oneshot\fR, the initial process exited successfully for
\fIType=forking\fR,
"READY=1"
is sent for
\fIType=notify\fR, or the
\fIBusName=\fR
has been taken for
\fIType=dbus\fR)\&.
.sp
Note that
\fIExecStartPre=\fR
may not be used to start long\-running processes\&. All processes forked off by processes invoked via
\fIExecStartPre=\fR
will be killed before the next service process is run\&.
.sp
Note that if any of the commands specified in
\fIExecStartPre=\fR,
\fIExecStart=\fR, or
\fIExecStartPost=\fR
fail (and are not prefixed with
"\-", see above) or time out before the service is fully up, execution continues with commands specified in
\fIExecStopPost=\fR, the commands in
\fIExecStop=\fR
are skipped\&.
.sp
Note that the execution of
\fIExecStartPost=\fR
is taken into account for the purpose of
\fIBefore=\fR/\fIAfter=\fR
ordering constraints\&.
.RE
.PP
\fIExecCondition=\fR
.RS 4
Optional commands that are executed before the command(s) in
\fIExecStartPre=\fR\&. Syntax is the same as for
\fIExecStart=\fR, except that multiple command lines are allowed and the commands are executed one after the other, serially\&.
.sp
The behavior is like an
\fIExecStartPre=\fR
and condition check hybrid: when an
\fIExecCondition=\fR
command exits with exit code 1 through 254 (inclusive), the remaining commands are skipped and the unit is
\fInot\fR
marked as failed\&. However, if an
\fIExecCondition=\fR
command exits with 255 or abnormally (e\&.g\&. timeout, killed by a signal, etc\&.), the unit will be considered failed (and remaining commands will be skipped)\&. Exit code of 0 or those matching
\fISuccessExitStatus=\fR
will continue execution to the next command(s)\&.
.sp
The same recommendations about not running long\-running processes in
\fIExecStartPre=\fR
also applies to
\fIExecCondition=\fR\&.
\fIExecCondition=\fR
will also run the commands in
\fIExecStopPost=\fR, as part of stopping the service, in the case of any non\-zero or abnormal exits, like the ones described above\&.
.RE
.PP
\fIExecReload=\fR
.RS 4
Commands to execute to trigger a configuration reload in the service\&. This argument takes multiple command lines, following the same scheme as described for
\fIExecStart=\fR
above\&. Use of this setting is optional\&. Specifier and environment variable substitution is supported here following the same scheme as for
\fIExecStart=\fR\&.
.sp
One additional, special environment variable is set: if known,
\fI$MAINPID\fR
is set to the main process of the daemon, and may be used for command lines like the following:
.sp
.if n \{\
.RS 4
.\}
.nf
ExecReload=kill \-HUP $MAINPID
.fi
.if n \{\
.RE
.\}
.sp
Note however that reloading a daemon by sending a signal (as with the example line above) is usually not a good choice, because this is an asynchronous operation and hence not suitable to order reloads of multiple services against each other\&. It is strongly recommended to set
\fIExecReload=\fR
to a command that not only triggers a configuration reload of the daemon, but also synchronously waits for it to complete\&. For example,
\fBdbus-broker\fR(1)
uses the following:
.sp
.if n \{\
.RS 4
.\}
.nf
ExecReload=busctl call org\&.freedesktop\&.DBus \e
        /org/freedesktop/DBus org\&.freedesktop\&.DBus \e
        ReloadConfig
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fIExecStop=\fR
.RS 4
Commands to execute to stop the service started via
\fIExecStart=\fR\&. This argument takes multiple command lines, following the same scheme as described for
\fIExecStart=\fR
above\&. Use of this setting is optional\&. After the commands configured in this option are run, it is implied that the service is stopped, and any processes remaining for it are terminated according to the
\fIKillMode=\fR
setting (see
\fBsystemd.kill\fR(5))\&. If this option is not specified, the process is terminated by sending the signal specified in
\fIKillSignal=\fR
or
\fIRestartKillSignal=\fR
when service stop is requested\&. Specifier and environment variable substitution is supported (including
\fI$MAINPID\fR, see above)\&.
.sp
Note that it is usually not sufficient to specify a command for this setting that only asks the service to terminate (for example, by sending some form of termination signal to it), but does not wait for it to do so\&. Since the remaining processes of the services are killed according to
\fIKillMode=\fR
and
\fIKillSignal=\fR
or
\fIRestartKillSignal=\fR
as described above immediately after the command exited, this may not result in a clean stop\&. The specified command should hence be a synchronous operation, not an asynchronous one\&.
.sp
Note that the commands specified in
\fIExecStop=\fR
are only executed when the service started successfully first\&. They are not invoked if the service was never started at all, or in case its start\-up failed, for example because any of the commands specified in
\fIExecStart=\fR,
\fIExecStartPre=\fR
or
\fIExecStartPost=\fR
failed (and weren\*(Aqt prefixed with
"\-", see above) or timed out\&. Use
\fIExecStopPost=\fR
to invoke commands when a service failed to start up correctly and is shut down again\&. Also note that the stop operation is always performed if the service started successfully, even if the processes in the service terminated on their own or were killed\&. The stop commands must be prepared to deal with that case\&.
\fI$MAINPID\fR
will be unset if systemd knows that the main process exited by the time the stop commands are called\&.
.sp
Service restart requests are implemented as stop operations followed by start operations\&. This means that
\fIExecStop=\fR
and
\fIExecStopPost=\fR
are executed during a service restart operation\&.
.sp
It is recommended to use this setting for commands that communicate with the service requesting clean termination\&. For post\-mortem clean\-up steps use
\fIExecStopPost=\fR
instead\&.
.RE
.PP
\fIExecStopPost=\fR
.RS 4
Additional commands that are executed after the service is stopped\&. This includes cases where the commands configured in
\fIExecStop=\fR
were used, where the service does not have any
\fIExecStop=\fR
defined, or where the service exited unexpectedly\&. This argument takes multiple command lines, following the same scheme as described for
\fIExecStart=\fR\&. Use of these settings is optional\&. Specifier and environment variable substitution is supported\&. Note that \(en unlike
\fIExecStop=\fR
\(en commands specified with this setting are invoked when a service failed to start up correctly and is shut down again\&.
.sp
It is recommended to use this setting for clean\-up operations that shall be executed even when the service failed to start up correctly\&. Commands configured with this setting need to be able to operate even if the service failed starting up half\-way and left incompletely initialized data around\&. As the service\*(Aqs processes have been terminated already when the commands specified with this setting are executed they should not attempt to communicate with them\&.
.sp
Note that all commands that are configured with this setting are invoked with the result code of the service, as well as the main process\*(Aq exit code and status, set in the
\fI$SERVICE_RESULT\fR,
\fI$EXIT_CODE\fR
and
\fI$EXIT_STATUS\fR
environment variables, see
\fBsystemd.exec\fR(5)
for details\&.
.sp
Note that the execution of
\fIExecStopPost=\fR
is taken into account for the purpose of
\fIBefore=\fR/\fIAfter=\fR
ordering constraints\&.
.RE
.PP
\fIRestartSec=\fR
.RS 4
Configures the time to sleep before restarting a service (as configured with
\fIRestart=\fR)\&. Takes a unit\-less value in seconds, or a time span value such as "5min 20s"\&. Defaults to 100ms\&.
.RE
.PP
\fITimeoutStartSec=\fR
.RS 4
Configures the time to wait for start\-up\&. If a daemon service does not signal start\-up completion within the configured time, the service will be considered failed and will be shut down again\&. The precise action depends on the
\fITimeoutStartFailureMode=\fR
option\&. Takes a unit\-less value in seconds, or a time span value such as "5min 20s"\&. Pass
"infinity"
to disable the timeout logic\&. Defaults to
\fIDefaultTimeoutStartSec=\fR
from the manager configuration file, except when
\fIType=oneshot\fR
is used, in which case the timeout is disabled by default (see
\fBsystemd-system.conf\fR(5))\&.
.sp
If a service of
\fIType=notify\fR
sends
"EXTEND_TIMEOUT_USEC=\&...", this may cause the start time to be extended beyond
\fITimeoutStartSec=\fR\&. The first receipt of this message must occur before
\fITimeoutStartSec=\fR
is exceeded, and once the start time has extended beyond
\fITimeoutStartSec=\fR, the service manager will allow the service to continue to start, provided the service repeats
"EXTEND_TIMEOUT_USEC=\&..."
within the interval specified until the service startup status is finished by
"READY=1"\&. (see
\fBsd_notify\fR(3))\&.
.RE
.PP
\fITimeoutStopSec=\fR
.RS 4
This option serves two purposes\&. First, it configures the time to wait for each
\fIExecStop=\fR
command\&. If any of them times out, subsequent
\fIExecStop=\fR
commands are skipped and the service will be terminated by
\fBSIGTERM\fR\&. If no
\fIExecStop=\fR
commands are specified, the service gets the
\fBSIGTERM\fR
immediately\&. This default behavior can be changed by the
\fITimeoutStopFailureMode=\fR
option\&. Second, it configures the time to wait for the service itself to stop\&. If it doesn\*(Aqt terminate in the specified time, it will be forcibly terminated by
\fBSIGKILL\fR
(see
\fIKillMode=\fR
in
\fBsystemd.kill\fR(5))\&. Takes a unit\-less value in seconds, or a time span value such as "5min 20s"\&. Pass
"infinity"
to disable the timeout logic\&. Defaults to
\fIDefaultTimeoutStopSec=\fR
from the manager configuration file (see
\fBsystemd-system.conf\fR(5))\&.
.sp
If a service of
\fIType=notify\fR
sends
"EXTEND_TIMEOUT_USEC=\&...", this may cause the stop time to be extended beyond
\fITimeoutStopSec=\fR\&. The first receipt of this message must occur before
\fITimeoutStopSec=\fR
is exceeded, and once the stop time has extended beyond
\fITimeoutStopSec=\fR, the service manager will allow the service to continue to stop, provided the service repeats
"EXTEND_TIMEOUT_USEC=\&..."
within the interval specified, or terminates itself (see
\fBsd_notify\fR(3))\&.
.RE
.PP
\fITimeoutAbortSec=\fR
.RS 4
This option configures the time to wait for the service to terminate when it was aborted due to a watchdog timeout (see
\fIWatchdogSec=\fR)\&. If the service has a short
\fITimeoutStopSec=\fR
this option can be used to give the system more time to write a core dump of the service\&. Upon expiration the service will be forcibly terminated by
\fBSIGKILL\fR
(see
\fIKillMode=\fR
in
\fBsystemd.kill\fR(5))\&. The core file will be truncated in this case\&. Use
\fITimeoutAbortSec=\fR
to set a sensible timeout for the core dumping per service that is large enough to write all expected data while also being short enough to handle the service failure in due time\&.
.sp
Takes a unit\-less value in seconds, or a time span value such as "5min 20s"\&. Pass an empty value to skip the dedicated watchdog abort timeout handling and fall back
\fITimeoutStopSec=\fR\&. Pass
"infinity"
to disable the timeout logic\&. Defaults to
\fIDefaultTimeoutAbortSec=\fR
from the manager configuration file (see
\fBsystemd-system.conf\fR(5))\&.
.sp
If a service of
\fIType=notify\fR
handles
\fBSIGABRT\fR
itself (instead of relying on the kernel to write a core dump) it can send
"EXTEND_TIMEOUT_USEC=\&..."
to extended the abort time beyond
\fITimeoutAbortSec=\fR\&. The first receipt of this message must occur before
\fITimeoutAbortSec=\fR
is exceeded, and once the abort time has extended beyond
\fITimeoutAbortSec=\fR, the service manager will allow the service to continue to abort, provided the service repeats
"EXTEND_TIMEOUT_USEC=\&..."
within the interval specified, or terminates itself (see
\fBsd_notify\fR(3))\&.
.RE
.PP
\fITimeoutSec=\fR
.RS 4
A shorthand for configuring both
\fITimeoutStartSec=\fR
and
\fITimeoutStopSec=\fR
to the specified value\&.
.RE
.PP
\fITimeoutStartFailureMode=\fR, \fITimeoutStopFailureMode=\fR
.RS 4
These options configure the action that is taken in case a daemon service does not signal start\-up within its configured
\fITimeoutStartSec=\fR, respectively if it does not stop within
\fITimeoutStopSec=\fR\&. Takes one of
\fBterminate\fR,
\fBabort\fR
and
\fBkill\fR\&. Both options default to
\fBterminate\fR\&.
.sp
If
\fBterminate\fR
is set the service will be gracefully terminated by sending the signal specified in
\fIKillSignal=\fR
(defaults to
\fBSIGTERM\fR, see
\fBsystemd.kill\fR(5))\&. If the service does not terminate the
\fIFinalKillSignal=\fR
is sent after
\fITimeoutStopSec=\fR\&. If
\fBabort\fR
is set,
\fIWatchdogSignal=\fR
is sent instead and
\fITimeoutAbortSec=\fR
applies before sending
\fIFinalKillSignal=\fR\&. This setting may be used to analyze services that fail to start\-up or shut\-down intermittently\&. By using
\fBkill\fR
the service is immediately terminated by sending
\fIFinalKillSignal=\fR
without any further timeout\&. This setting can be used to expedite the shutdown of failing services\&.
.RE
.PP
\fIRuntimeMaxSec=\fR
.RS 4
Configures a maximum time for the service to run\&. If this is used and the service has been active for longer than the specified time it is terminated and put into a failure state\&. Note that this setting does not have any effect on
\fIType=oneshot\fR
services, as they terminate immediately after activation completed\&. Pass
"infinity"
(the default) to configure no runtime limit\&.
.sp
If a service of
\fIType=notify\fR
sends
"EXTEND_TIMEOUT_USEC=\&...", this may cause the runtime to be extended beyond
\fIRuntimeMaxSec=\fR\&. The first receipt of this message must occur before
\fIRuntimeMaxSec=\fR
is exceeded, and once the runtime has extended beyond
\fIRuntimeMaxSec=\fR, the service manager will allow the service to continue to run, provided the service repeats
"EXTEND_TIMEOUT_USEC=\&..."
within the interval specified until the service shutdown is achieved by
"STOPPING=1"
(or termination)\&. (see
\fBsd_notify\fR(3))\&.
.RE
.PP
\fIWatchdogSec=\fR
.RS 4
Configures the watchdog timeout for a service\&. The watchdog is activated when the start\-up is completed\&. The service must call
\fBsd_notify\fR(3)
regularly with
"WATCHDOG=1"
(i\&.e\&. the "keep\-alive ping")\&. If the time between two such calls is larger than the configured time, then the service is placed in a failed state and it will be terminated with
\fBSIGABRT\fR
(or the signal specified by
\fIWatchdogSignal=\fR)\&. By setting
\fIRestart=\fR
to
\fBon\-failure\fR,
\fBon\-watchdog\fR,
\fBon\-abnormal\fR
or
\fBalways\fR, the service will be automatically restarted\&. The time configured here will be passed to the executed service process in the
\fIWATCHDOG_USEC=\fR
environment variable\&. This allows daemons to automatically enable the keep\-alive pinging logic if watchdog support is enabled for the service\&. If this option is used,
\fINotifyAccess=\fR
(see below) should be set to open access to the notification socket provided by systemd\&. If
\fINotifyAccess=\fR
is not set, it will be implicitly set to
\fBmain\fR\&. Defaults to 0, which disables this feature\&. The service can check whether the service manager expects watchdog keep\-alive notifications\&. See
\fBsd_watchdog_enabled\fR(3)
for details\&.
\fBsd_event_set_watchdog\fR(3)
may be used to enable automatic watchdog notification support\&.
.RE
.PP
\fIRestart=\fR
.RS 4
Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached\&. The service process may be the main service process, but it may also be one of the processes specified with
\fIExecStartPre=\fR,
\fIExecStartPost=\fR,
\fIExecStop=\fR,
\fIExecStopPost=\fR, or
\fIExecReload=\fR\&. When the death of the process is a result of systemd operation (e\&.g\&. service stop or restart), the service will not be restarted\&. Timeouts include missing the watchdog "keep\-alive ping" deadline and a service start, reload, and stop operation timeouts\&.
.sp
Takes one of
\fBno\fR,
\fBon\-success\fR,
\fBon\-failure\fR,
\fBon\-abnormal\fR,
\fBon\-watchdog\fR,
\fBon\-abort\fR, or
\fBalways\fR\&. If set to
\fBno\fR
(the default), the service will not be restarted\&. If set to
\fBon\-success\fR, it will be restarted only when the service process exits cleanly\&. In this context, a clean exit means any of the following:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
exit code of 0;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
for types other than
\fIType=oneshot\fR, one of the signals
\fBSIGHUP\fR,
\fBSIGINT\fR,
\fBSIGTERM\fR, or
\fBSIGPIPE\fR;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
exit statuses and signals specified in
\fISuccessExitStatus=\fR\&.
.RE
.sp
If set to
\fBon\-failure\fR, the service will be restarted when the process exits with a non\-zero exit code, is terminated by a signal (including on core dump, but excluding the aforementioned four signals), when an operation (such as service reload) times out, and when the configured watchdog timeout is triggered\&. If set to
\fBon\-abnormal\fR, the service will be restarted when the process is terminated by a signal (including on core dump, excluding the aforementioned four signals), when an operation times out, or when the watchdog timeout is triggered\&. If set to
\fBon\-abort\fR, the service will be restarted only if the service process exits due to an uncaught signal not specified as a clean exit status\&. If set to
\fBon\-watchdog\fR, the service will be restarted only if the watchdog timeout for the service expires\&. If set to
\fBalways\fR, the service will be restarted regardless of whether it exited cleanly or not, got terminated abnormally by a signal, or hit a timeout\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&2.\ \&Exit causes and the effect of the \fIRestart=\fR settings
.TS
allbox tab(:);
lB lB lB lB lB lB lB lB.
T{
Restart settings/Exit causes
T}:T{
\fBno\fR
T}:T{
\fBalways\fR
T}:T{
\fBon\-success\fR
T}:T{
\fBon\-failure\fR
T}:T{
\fBon\-abnormal\fR
T}:T{
\fBon\-abort\fR
T}:T{
\fBon\-watchdog\fR
T}
.T&
l l l l l l l l
l l l l l l l l
l l l l l l l l
l l l l l l l l
l l l l l l l l.
T{
Clean exit code or signal
T}:T{
\ \&
T}:T{
X
T}:T{
X
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
Unclean exit code
T}:T{
\ \&
T}:T{
X
T}:T{
\ \&
T}:T{
X
T}:T{
\ \&
T}:T{
\ \&
T}:T{
\ \&
T}
T{
Unclean signal
T}:T{
\ \&
T}:T{
X
T}:T{
\ \&
T}:T{
X
T}:T{
X
T}:T{
X
T}:T{
\ \&
T}
T{
Timeout
T}:T{
\ \&
T}:T{
X
T}:T{
\ \&
T}:T{
X
T}:T{
X
T}:T{
\ \&
T}:T{
\ \&
T}
T{
Watchdog
T}:T{
\ \&
T}:T{
X
T}:T{
\ \&
T}:T{
X
T}:T{
X
T}:T{
\ \&
T}:T{
X
T}
.TE
.sp 1
As exceptions to the setting above, the service will not be restarted if the exit code or signal is specified in
\fIRestartPreventExitStatus=\fR
(see below) or the service is stopped with
\fBsystemctl stop\fR
or an equivalent operation\&. Also, the services will always be restarted if the exit code or signal is specified in
\fIRestartForceExitStatus=\fR
(see below)\&.
.sp
Note that service restart is subject to unit start rate limiting configured with
\fIStartLimitIntervalSec=\fR
and
\fIStartLimitBurst=\fR, see
\fBsystemd.unit\fR(5)
for details\&. A restarted service enters the failed state only after the start limits are reached\&.
.sp
Setting this to
\fBon\-failure\fR
is the recommended choice for long\-running services, in order to increase reliability by attempting automatic recovery from errors\&. For services that shall be able to terminate on their own choice (and avoid immediate restarting),
\fBon\-abnormal\fR
is an alternative choice\&.
.RE
.PP
\fISuccessExitStatus=\fR
.RS 4
Takes a list of exit status definitions that, when returned by the main service process, will be considered successful termination, in addition to the normal successful exit status 0 and, except for
\fIType=oneshot\fR, the signals
\fBSIGHUP\fR,
\fBSIGINT\fR,
\fBSIGTERM\fR, and
\fBSIGPIPE\fR\&. Exit status definitions can be numeric termination statuses, termination status names, or termination signal names, separated by spaces\&. See the Process Exit Codes section in
\fBsystemd.exec\fR(5)
for a list of termination status names (for this setting only the part without the
"EXIT_"
or
"EX_"
prefix should be used)\&. See
\fBsignal\fR(7)
for a list of signal names\&.
.sp
Note that this setting does not change the mapping between numeric exit statuses and their names, i\&.e\&. regardless how this setting is used 0 will still be mapped to
"SUCCESS"
(and thus typically shown as
"0/SUCCESS"
in tool outputs) and 1 to
"FAILURE"
(and thus typically shown as
"1/FAILURE"), and so on\&. It only controls what happens as effect of these exit statuses, and how it propagates to the state of the service as a whole\&.
.sp
This option may appear more than once, in which case the list of successful exit statuses is merged\&. If the empty string is assigned to this option, the list is reset, all prior assignments of this option will have no effect\&.
.PP
\fBExample\ \&1.\ \&A service with the \fISuccessExitStatus=\fR setting\fR
.sp
.if n \{\
.RS 4
.\}
.nf
SuccessExitStatus=TEMPFAIL 250 SIGKILL
.fi
.if n \{\
.RE
.\}
.sp
Exit status 75 (\fBTEMPFAIL\fR), 250, and the termination signal
\fBSIGKILL\fR
are considered clean service terminations\&.

Note:
\fBsystemd\-analyze exit\-status\fR
may be used to list exit statuses and translate between numerical status values and names\&.
.RE
.PP
\fIRestartPreventExitStatus=\fR
.RS 4
Takes a list of exit status definitions that, when returned by the main service process, will prevent automatic service restarts, regardless of the restart setting configured with
\fIRestart=\fR\&. Exit status definitions can either be numeric exit codes or termination signal names, and are separated by spaces\&. Defaults to the empty list, so that, by default, no exit status is excluded from the configured restart logic\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
RestartPreventExitStatus=1 6 SIGABRT
.fi
.if n \{\
.RE
.\}
.sp
ensures that exit codes 1 and 6 and the termination signal
\fBSIGABRT\fR
will not result in automatic service restarting\&. This option may appear more than once, in which case the list of restart\-preventing statuses is merged\&. If the empty string is assigned to this option, the list is reset and all prior assignments of this option will have no effect\&.
.sp
Note that this setting has no effect on processes configured via
\fIExecStartPre=\fR,
\fIExecStartPost=\fR,
\fIExecStop=\fR,
\fIExecStopPost=\fR
or
\fIExecReload=\fR, but only on the main service process, i\&.e\&. either the one invoked by
\fIExecStart=\fR
or (depending on
\fIType=\fR,
\fIPIDFile=\fR, \&...) the otherwise configured main process\&.
.RE
.PP
\fIRestartForceExitStatus=\fR
.RS 4
Takes a list of exit status definitions that, when returned by the main service process, will force automatic service restarts, regardless of the restart setting configured with
\fIRestart=\fR\&. The argument format is similar to
\fIRestartPreventExitStatus=\fR\&.
.RE
.PP
\fIRootDirectoryStartOnly=\fR
.RS 4
Takes a boolean argument\&. If true, the root directory, as configured with the
\fIRootDirectory=\fR
option (see
\fBsystemd.exec\fR(5)
for more information), is only applied to the process started with
\fIExecStart=\fR, and not to the various other
\fIExecStartPre=\fR,
\fIExecStartPost=\fR,
\fIExecReload=\fR,
\fIExecStop=\fR, and
\fIExecStopPost=\fR
commands\&. If false, the setting is applied to all configured commands the same way\&. Defaults to false\&.
.RE
.PP
\fINonBlocking=\fR
.RS 4
Set the
\fBO_NONBLOCK\fR
flag for all file descriptors passed via socket\-based activation\&. If true, all file descriptors >= 3 (i\&.e\&. all except stdin, stdout, stderr), excluding those passed in via the file descriptor storage logic (see
\fIFileDescriptorStoreMax=\fR
for details), will have the
\fBO_NONBLOCK\fR
flag set and hence are in non\-blocking mode\&. This option is only useful in conjunction with a socket unit, as described in
\fBsystemd.socket\fR(5)
and has no effect on file descriptors which were previously saved in the file\-descriptor store for example\&. Defaults to false\&.
.RE
.PP
\fINotifyAccess=\fR
.RS 4
Controls access to the service status notification socket, as accessible via the
\fBsd_notify\fR(3)
call\&. Takes one of
\fBnone\fR
(the default),
\fBmain\fR,
\fBexec\fR
or
\fBall\fR\&. If
\fBnone\fR, no daemon status updates are accepted from the service processes, all status update messages are ignored\&. If
\fBmain\fR, only service updates sent from the main process of the service are accepted\&. If
\fBexec\fR, only service updates sent from any of the main or control processes originating from one of the
\fIExec*=\fR
commands are accepted\&. If
\fBall\fR, all services updates from all members of the service\*(Aqs control group are accepted\&. This option should be set to open access to the notification socket when using
\fIType=notify\fR
or
\fIWatchdogSec=\fR
(see above)\&. If those options are used but
\fINotifyAccess=\fR
is not configured, it will be implicitly set to
\fBmain\fR\&.
.sp
Note that
\fBsd_notify()\fR
notifications may be attributed to units correctly only if either the sending process is still around at the time PID 1 processes the message, or if the sending process is explicitly runtime\-tracked by the service manager\&. The latter is the case if the service manager originally forked off the process, i\&.e\&. on all processes that match
\fBmain\fR
or
\fBexec\fR\&. Conversely, if an auxiliary process of the unit sends an
\fBsd_notify()\fR
message and immediately exits, the service manager might not be able to properly attribute the message to the unit, and thus will ignore it, even if
\fINotifyAccess=\fR\fBall\fR
is set for it\&.
.sp
Hence, to eliminate all race conditions involving lookup of the client\*(Aqs unit and attribution of notifications to units correctly,
\fBsd_notify_barrier()\fR
may be used\&. This call acts as a synchronization point and ensures all notifications sent before this call have been picked up by the service manager when it returns successfully\&. Use of
\fBsd_notify_barrier()\fR
is needed for clients which are not invoked by the service manager, otherwise this synchronization mechanism is unnecessary for attribution of notifications to the unit\&.
.RE
.PP
\fISockets=\fR
.RS 4
Specifies the name of the socket units this service shall inherit socket file descriptors from when the service is started\&. Normally, it should not be necessary to use this setting, as all socket file descriptors whose unit shares the same name as the service (subject to the different unit name suffix of course) are passed to the spawned process\&.
.sp
Note that the same socket file descriptors may be passed to multiple processes simultaneously\&. Also note that a different service may be activated on incoming socket traffic than the one which is ultimately configured to inherit the socket file descriptors\&. Or, in other words: the
\fIService=\fR
setting of
\&.socket
units does not have to match the inverse of the
\fISockets=\fR
setting of the
\&.service
it refers to\&.
.sp
This option may appear more than once, in which case the list of socket units is merged\&. Note that once set, clearing the list of sockets again (for example, by assigning the empty string to this option) is not supported\&.
.RE
.PP
\fIFileDescriptorStoreMax=\fR
.RS 4
Configure how many file descriptors may be stored in the service manager for the service using
\fBsd_pid_notify_with_fds\fR(3)\*(Aqs
"FDSTORE=1"
messages\&. This is useful for implementing services that can restart after an explicit request or a crash without losing state\&. Any open sockets and other file descriptors which should not be closed during the restart may be stored this way\&. Application state can either be serialized to a file in
/run/, or better, stored in a
\fBmemfd_create\fR(2)
memory file descriptor\&. Defaults to 0, i\&.e\&. no file descriptors may be stored in the service manager\&. All file descriptors passed to the service manager from a specific service are passed back to the service\*(Aqs main process on the next service restart (see
\fBsd_listen_fds\fR(3)
for details about the precise protocol used and the order in which the file descriptors are passed)\&. Any file descriptors passed to the service manager are automatically closed when
\fBPOLLHUP\fR
or
\fBPOLLERR\fR
is seen on them, or when the service is fully stopped and no job is queued or being executed for it\&. If this option is used,
\fINotifyAccess=\fR
(see above) should be set to open access to the notification socket provided by systemd\&. If
\fINotifyAccess=\fR
is not set, it will be implicitly set to
\fBmain\fR\&.
.RE
.PP
\fIUSBFunctionDescriptors=\fR
.RS 4
Configure the location of a file containing
\m[blue]\fBUSB FunctionFS\fR\m[]\&\s-2\u[2]\d\s+2
descriptors, for implementation of USB gadget functions\&. This is used only in conjunction with a socket unit with
\fIListenUSBFunction=\fR
configured\&. The contents of this file are written to the
ep0
file after it is opened\&.
.RE
.PP
\fIUSBFunctionStrings=\fR
.RS 4
Configure the location of a file containing USB FunctionFS strings\&. Behavior is similar to
\fIUSBFunctionDescriptors=\fR
above\&.
.RE
.PP
\fIOOMPolicy=\fR
.RS 4
Configure the Out\-Of\-Memory (OOM) killer policy\&. On Linux, when memory becomes scarce the kernel might decide to kill a running process in order to free up memory and reduce memory pressure\&. This setting takes one of
\fBcontinue\fR,
\fBstop\fR
or
\fBkill\fR\&. If set to
\fBcontinue\fR
and a process of the service is killed by the kernel\*(Aqs OOM killer this is logged but the service continues running\&. If set to
\fBstop\fR
the event is logged but the service is terminated cleanly by the service manager\&. If set to
\fBkill\fR
and one of the service\*(Aqs processes is killed by the OOM killer the kernel is instructed to kill all remaining processes of the service, too\&. Defaults to the setting
\fIDefaultOOMPolicy=\fR
in
\fBsystemd-system.conf\fR(5)
is set to, except for services where
\fIDelegate=\fR
is turned on, where it defaults to
\fBcontinue\fR\&.
.sp
Use the
\fIOOMScoreAdjust=\fR
setting to configure whether processes of the unit shall be considered preferred or less preferred candidates for process termination by the Linux OOM killer logic\&. See
\fBsystemd.exec\fR(5)
for details\&.
.RE
.PP
Check
\fBsystemd.exec\fR(5)
and
\fBsystemd.kill\fR(5)
for more settings\&.
.SH "COMMAND LINES"
.PP
This section describes command line parsing and variable and specifier substitutions for
\fIExecStart=\fR,
\fIExecStartPre=\fR,
\fIExecStartPost=\fR,
\fIExecReload=\fR,
\fIExecStop=\fR, and
\fIExecStopPost=\fR
options\&.
.PP
Multiple command lines may be concatenated in a single directive by separating them with semicolons (these semicolons must be passed as separate words)\&. Lone semicolons may be escaped as
"\e;"\&.
.PP
Each command line is unquoted using the rules described in "Quoting" section in
\fBsystemd.syntax\fR(5)\&. The first item becomes the command to execute, and the subsequent items the arguments\&.
.PP
This syntax is inspired by shell syntax, but only the meta\-characters and expansions described in the following paragraphs are understood, and the expansion of variables is different\&. Specifically, redirection using
"<",
"<<",
">", and
">>", pipes using
"|", running programs in the background using
"&", and
\fIother elements of shell syntax are not supported\fR\&.
.PP
The command to execute may contain spaces, but control characters are not allowed\&.
.PP
The command line accepts
"%"
specifiers as described in
\fBsystemd.unit\fR(5)\&.
.PP
Basic environment variable substitution is supported\&. Use
"${FOO}"
as part of a word, or as a word of its own, on the command line, in which case it will be erased and replaced by the exact value of the environment variable (if any) including all whitespace it contains, always resulting in exactly a single argument\&. Use
"$FOO"
as a separate word on the command line, in which case it will be replaced by the value of the environment variable split at whitespace, resulting in zero or more arguments\&. For this type of expansion, quotes are respected when splitting into words, and afterwards removed\&.
.PP
If the command is not a full (absolute) path, it will be resolved to a full path using a fixed search path determined at compilation time\&. Searched directories include
/usr/local/bin/,
/usr/bin/,
/bin/
on systems using split
/usr/bin/
and
/bin/
directories, and their
sbin/
counterparts on systems using split
bin/
and
sbin/\&. It is thus safe to use just the executable name in case of executables located in any of the "standard" directories, and an absolute path must be used in other cases\&. Using an absolute path is recommended to avoid ambiguity\&. Hint: this search path may be queried using
\fBsystemd\-path search\-binaries\-default\fR\&.
.PP
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
Environment="ONE=one" \*(AqTWO=two two\*(Aq
ExecStart=echo $ONE $TWO ${TWO}
.fi
.if n \{\
.RE
.\}
.PP
This will execute
\fB/bin/echo\fR
with four arguments:
"one",
"two",
"two", and
"two two"\&.
.PP
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
Environment=ONE=\*(Aqone\*(Aq "TWO=\*(Aqtwo\ \&two\*(Aq\ \&too" THREE=
ExecStart=/bin/echo ${ONE} ${TWO} ${THREE}
ExecStart=/bin/echo $ONE $TWO $THREE
.fi
.if n \{\
.RE
.\}
.PP
This results in
/bin/echo
being called twice, the first time with arguments
"\*(Aqone\*(Aq",
"\*(Aqtwo\ \&two\*(Aq\ \&too",
"", and the second time with arguments
"one",
"two\ \&two",
"too"\&.
.PP
To pass a literal dollar sign, use
"$$"\&. Variables whose value is not known at expansion time are treated as empty strings\&. Note that the first argument (i\&.e\&. the program to execute) may not be a variable\&.
.PP
Variables to be used in this fashion may be defined through
\fIEnvironment=\fR
and
\fIEnvironmentFile=\fR\&. In addition, variables listed in the section "Environment variables in spawned processes" in
\fBsystemd.exec\fR(5), which are considered "static configuration", may be used (this includes e\&.g\&.
\fI$USER\fR, but not
\fI$TERM\fR)\&.
.PP
Note that shell command lines are not directly supported\&. If shell command lines are to be used, they need to be passed explicitly to a shell implementation of some kind\&. Example:
.sp
.if n \{\
.RS 4
.\}
.nf
ExecStart=sh \-c \*(Aqdmesg | tac\*(Aq
.fi
.if n \{\
.RE
.\}
.PP
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
ExecStart=echo one ; echo "two two"
.fi
.if n \{\
.RE
.\}
.PP
This will execute
\fBecho\fR
two times, each time with one argument:
"one"
and
"two two", respectively\&. Because two commands are specified,
\fIType=oneshot\fR
must be used\&.
.PP
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
ExecStart=echo / >/dev/null & \e; \e
ls
.fi
.if n \{\
.RE
.\}
.PP
This will execute
\fBecho\fR
with five arguments:
"/",
">/dev/null",
"&",
";", and
"ls"\&.
.SH "EXAMPLES"
.PP
\fBExample\ \&2.\ \&Simple service\fR
.PP
The following unit file creates a service that will execute
/usr/sbin/foo\-daemon\&. Since no
\fIType=\fR
is specified, the default
\fIType=\fR\fBsimple\fR
will be assumed\&. systemd will assume the unit to be started immediately after the program has begun executing\&.
.sp
.if n \{\
.RS 4
.\}
.nf
[Unit]
Description=Foo

[Service]
ExecStart=/usr/sbin/foo\-daemon

[Install]
WantedBy=multi\-user\&.target
.fi
.if n \{\
.RE
.\}
.PP
Note that systemd assumes here that the process started by systemd will continue running until the service terminates\&. If the program daemonizes itself (i\&.e\&. forks), please use
\fIType=\fR\fBforking\fR
instead\&.
.PP
Since no
\fIExecStop=\fR
was specified, systemd will send SIGTERM to all processes started from this service, and after a timeout also SIGKILL\&. This behavior can be modified, see
\fBsystemd.kill\fR(5)
for details\&.
.PP
Note that this unit type does not include any type of notification when a service has completed initialization\&. For this, you should use other unit types, such as
\fIType=\fR\fBnotify\fR
if the service understands systemd\*(Aqs notification protocol,
\fIType=\fR\fBforking\fR
if the service can background itself or
\fIType=\fR\fBdbus\fR
if the unit acquires a DBus name once initialization is complete\&. See below\&.
.PP
\fBExample\ \&3.\ \&Oneshot service\fR
.PP
Sometimes, units should just execute an action without keeping active processes, such as a filesystem check or a cleanup action on boot\&. For this,
\fIType=\fR\fBoneshot\fR
exists\&. Units of this type will wait until the process specified terminates and then fall back to being inactive\&. The following unit will perform a cleanup action:
.sp
.if n \{\
.RS 4
.\}
.nf
[Unit]
Description=Cleanup old Foo data

[Service]
Type=oneshot
ExecStart=/usr/sbin/foo\-cleanup

[Install]
WantedBy=multi\-user\&.target
.fi
.if n \{\
.RE
.\}
.PP
Note that systemd will consider the unit to be in the state "starting" until the program has terminated, so ordered dependencies will wait for the program to finish before starting themselves\&. The unit will revert to the "inactive" state after the execution is done, never reaching the "active" state\&. That means another request to start the unit will perform the action again\&.
.PP
\fIType=\fR\fBoneshot\fR
are the only service units that may have more than one
\fIExecStart=\fR
specified\&. For units with multiple commands (\fIType=oneshot\fR), all commands will be run again\&.
.PP
For
\fIType=oneshot\fR,
\fIRestart=\fR\fBalways\fR
and
\fIRestart=\fR\fBon\-success\fR
are
\fInot\fR
allowed\&.
.PP
\fBExample\ \&4.\ \&Stoppable oneshot service\fR
.PP
Similarly to the oneshot services, there are sometimes units that need to execute a program to set up something and then execute another to shut it down, but no process remains active while they are considered "started"\&. Network configuration can sometimes fall into this category\&. Another use case is if a oneshot service shall not be executed each time when they are pulled in as a dependency, but only the first time\&.
.PP
For this, systemd knows the setting
\fIRemainAfterExit=\fR\fByes\fR, which causes systemd to consider the unit to be active if the start action exited successfully\&. This directive can be used with all types, but is most useful with
\fIType=\fR\fBoneshot\fR
and
\fIType=\fR\fBsimple\fR\&. With
\fIType=\fR\fBoneshot\fR, systemd waits until the start action has completed before it considers the unit to be active, so dependencies start only after the start action has succeeded\&. With
\fIType=\fR\fBsimple\fR, dependencies will start immediately after the start action has been dispatched\&. The following unit provides an example for a simple static firewall\&.
.sp
.if n \{\
.RS 4
.\}
.nf
[Unit]
Description=Simple firewall

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/sbin/simple\-firewall\-start
ExecStop=/usr/local/sbin/simple\-firewall\-stop

[Install]
WantedBy=multi\-user\&.target
.fi
.if n \{\
.RE
.\}
.PP
Since the unit is considered to be running after the start action has exited, invoking
\fBsystemctl start\fR
on that unit again will cause no action to be taken\&.
.PP
\fBExample\ \&5.\ \&Traditional forking services\fR
.PP
Many traditional daemons/services background (i\&.e\&. fork, daemonize) themselves when starting\&. Set
\fIType=\fR\fBforking\fR
in the service\*(Aqs unit file to support this mode of operation\&. systemd will consider the service to be in the process of initialization while the original program is still running\&. Once it exits successfully and at least a process remains (and
\fIRemainAfterExit=\fR\fBno\fR), the service is considered started\&.
.PP
Often, a traditional daemon only consists of one process\&. Therefore, if only one process is left after the original process terminates, systemd will consider that process the main process of the service\&. In that case, the
\fI$MAINPID\fR
variable will be available in
\fIExecReload=\fR,
\fIExecStop=\fR, etc\&.
.PP
In case more than one process remains, systemd will be unable to determine the main process, so it will not assume there is one\&. In that case,
\fI$MAINPID\fR
will not expand to anything\&. However, if the process decides to write a traditional PID file, systemd will be able to read the main PID from there\&. Please set
\fIPIDFile=\fR
accordingly\&. Note that the daemon should write that file before finishing with its initialization\&. Otherwise, systemd might try to read the file before it exists\&.
.PP
The following example shows a simple daemon that forks and just starts one process in the background:
.sp
.if n \{\
.RS 4
.\}
.nf
[Unit]
Description=Some simple daemon

[Service]
Type=forking
ExecStart=/usr/sbin/my\-simple\-daemon \-d

[Install]
WantedBy=multi\-user\&.target
.fi
.if n \{\
.RE
.\}
.PP
Please see
\fBsystemd.kill\fR(5)
for details on how you can influence the way systemd terminates the service\&.
.PP
\fBExample\ \&6.\ \&DBus services\fR
.PP
For services that acquire a name on the DBus system bus, use
\fIType=\fR\fBdbus\fR
and set
\fIBusName=\fR
accordingly\&. The service should not fork (daemonize)\&. systemd will consider the service to be initialized once the name has been acquired on the system bus\&. The following example shows a typical DBus service:
.sp
.if n \{\
.RS 4
.\}
.nf
[Unit]
Description=Simple DBus service

[Service]
Type=dbus
BusName=org\&.example\&.simple\-dbus\-service
ExecStart=/usr/sbin/simple\-dbus\-service

[Install]
WantedBy=multi\-user\&.target
.fi
.if n \{\
.RE
.\}
.PP
For
\fIbus\-activatable\fR
services, do not include a [Install] section in the systemd service file, but use the
\fISystemdService=\fR
option in the corresponding DBus service file, for example (/usr/share/dbus\-1/system\-services/org\&.example\&.simple\-dbus\-service\&.service):
.sp
.if n \{\
.RS 4
.\}
.nf
[D\-BUS Service]
Name=org\&.example\&.simple\-dbus\-service
Exec=/usr/sbin/simple\-dbus\-service
User=root
SystemdService=simple\-dbus\-service\&.service
.fi
.if n \{\
.RE
.\}
.PP
Please see
\fBsystemd.kill\fR(5)
for details on how you can influence the way systemd terminates the service\&.
.PP
\fBExample\ \&7.\ \&Services that notify systemd about their initialization\fR
.PP
\fIType=\fR\fBsimple\fR
services are really easy to write, but have the major disadvantage of systemd not being able to tell when initialization of the given service is complete\&. For this reason, systemd supports a simple notification protocol that allows daemons to make systemd aware that they are done initializing\&. Use
\fIType=\fR\fBnotify\fR
for this\&. A typical service file for such a daemon would look like this:
.sp
.if n \{\
.RS 4
.\}
.nf
[Unit]
Description=Simple notifying service

[Service]
Type=notify
ExecStart=/usr/sbin/simple\-notifying\-service

[Install]
WantedBy=multi\-user\&.target
.fi
.if n \{\
.RE
.\}
.PP
Note that the daemon has to support systemd\*(Aqs notification protocol, else systemd will think the service has not started yet and kill it after a timeout\&. For an example of how to update daemons to support this protocol transparently, take a look at
\fBsd_notify\fR(3)\&. systemd will consider the unit to be in the \*(Aqstarting\*(Aq state until a readiness notification has arrived\&.
.PP
Please see
\fBsystemd.kill\fR(5)
for details on how you can influence the way systemd terminates the service\&.
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsystemctl\fR(1),
\fBsystemd-system.conf\fR(5),
\fBsystemd.unit\fR(5),
\fBsystemd.exec\fR(5),
\fBsystemd.resource-control\fR(5),
\fBsystemd.kill\fR(5),
\fBsystemd.directives\fR(7),
\fBsystemd-run\fR(1)
.SH "NOTES"
.IP " 1." 4
Incompatibilities with SysV
.RS 4
\%https://www.freedesktop.org/wiki/Software/systemd/Incompatibilities
.RE
.IP " 2." 4
USB FunctionFS
.RS 4
\%https://www.kernel.org/doc/Documentation/usb/functionfs.txt
.RE
