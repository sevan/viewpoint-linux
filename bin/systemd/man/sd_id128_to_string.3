'\" t
.TH "SD_ID128_TO_STRING" "3" "" "systemd 248" "sd_id128_to_string"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
sd_id128_to_string, sd_id128_from_string \- Format or parse 128\-bit IDs as strings
.SH "SYNOPSIS"
.sp
.ft B
.nf
#include <systemd/sd\-id128\&.h>
.fi
.ft
.HP \w'char\ *sd_id128_to_string('u
.BI "char *sd_id128_to_string(sd_id128_t\ " "id" ",\ char\ " "s" "[33]);"
.HP \w'int\ sd_id128_from_string('u
.BI "int sd_id128_from_string(const\ char\ *" "s" ",\ sd_id128_t\ *" "ret" ");"
.SH "DESCRIPTION"
.PP
\fBsd_id128_to_string()\fR
formats a 128\-bit ID as a character string\&. It expects the ID and a string array capable of storing 33 characters\&. The ID will be formatted as 32 lowercase hexadecimal digits and be terminated by a
\fBNUL\fR
byte\&.
.PP
\fBsd_id128_from_string()\fR
implements the reverse operation: it takes a 33 character string with 32 hexadecimal digits (either lowercase or uppercase, terminated by
\fBNUL\fR) and parses them back into a 128\-bit ID returned in
\fIret\fR\&. Alternatively, this call can also parse a 37\-character string with a 128\-bit ID formatted as RFC UUID\&. If
\fIret\fR
is passed as
\fBNULL\fR
the function will validate the passed ID string, but not actually return it in parsed form\&.
.PP
For more information about the
"sd_id128_t"
type see
\fBsd-id128\fR(3)\&. Note that these calls operate the same way on all architectures, i\&.e\&. the results do not depend on endianness\&.
.PP
When formatting a 128\-bit ID into a string, it is often easier to use a format string for
\fBprintf\fR(3)\&. This is easily done using the
\fBSD_ID128_FORMAT_STR\fR
and
\fBSD_ID128_FORMAT_VAL()\fR
macros\&. For more information see
\fBsd-id128\fR(3)\&.
.SH "RETURN VALUE"
.PP
\fBsd_id128_to_string()\fR
always succeeds and returns a pointer to the string array passed in\&.
\fBsd_id128_from_string()\fR
returns 0 on success, in which case
\fIret\fR
is filled in, or a negative errno\-style error code\&.
.SH "NOTES"
.PP
These APIs are implemented as a shared library, which can be compiled and linked to with the
\fBlibsystemd\fR\ \&\fBpkg-config\fR(1)
file\&.
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsd-id128\fR(3),
\fBprintf\fR(3)
