'\" t
.TH "SYSTEMD\-NSPAWN" "1" "" "systemd 248" "systemd-nspawn"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd-nspawn \- Spawn a command or OS in a light\-weight container
.SH "SYNOPSIS"
.HP \w'\fBsystemd\-nspawn\fR\ 'u
\fBsystemd\-nspawn\fR [OPTIONS...] [\fICOMMAND\fR\ [ARGS...]]
.HP \w'\fBsystemd\-nspawn\fR\ 'u
\fBsystemd\-nspawn\fR \-\-boot [OPTIONS...] [ARGS...]
.SH "DESCRIPTION"
.PP
\fBsystemd\-nspawn\fR
may be used to run a command or OS in a light\-weight namespace container\&. In many ways it is similar to
\fBchroot\fR(1), but more powerful since it fully virtualizes the file system hierarchy, as well as the process tree, the various IPC subsystems and the host and domain name\&.
.PP
\fBsystemd\-nspawn\fR
may be invoked on any directory tree containing an operating system tree, using the
\fB\-\-directory=\fR
command line option\&. By using the
\fB\-\-machine=\fR
option an OS tree is automatically searched for in a couple of locations, most importantly in
/var/lib/machines/, the suggested directory to place OS container images installed on the system\&.
.PP
In contrast to
\fBchroot\fR(1)\ \&\fBsystemd\-nspawn\fR
may be used to boot full Linux\-based operating systems in a container\&.
.PP
\fBsystemd\-nspawn\fR
limits access to various kernel interfaces in the container to read\-only, such as
/sys/,
/proc/sys/
or
/sys/fs/selinux/\&. The host\*(Aqs network interfaces and the system clock may not be changed from within the container\&. Device nodes may not be created\&. The host system cannot be rebooted and kernel modules may not be loaded from within the container\&.
.PP
Use a tool like
\fBdnf\fR(8),
\fBdebootstrap\fR(8), or
\fBpacman\fR(8)
to set up an OS directory tree suitable as file system hierarchy for
\fBsystemd\-nspawn\fR
containers\&. See the Examples section below for details on suitable invocation of these commands\&.
.PP
As a safety check
\fBsystemd\-nspawn\fR
will verify the existence of
/usr/lib/os\-release
or
/etc/os\-release
in the container tree before starting the container (see
\fBos-release\fR(5))\&. It might be necessary to add this file to the container tree manually if the OS of the container is too old to contain this file out\-of\-the\-box\&.
.PP
\fBsystemd\-nspawn\fR
may be invoked directly from the interactive command line or run as system service in the background\&. In this mode each container instance runs as its own service instance; a default template unit file
systemd\-nspawn@\&.service
is provided to make this easy, taking the container name as instance identifier\&. Note that different default options apply when
\fBsystemd\-nspawn\fR
is invoked by the template unit file than interactively on the command line\&. Most importantly the template unit file makes use of the
\fB\-\-boot\fR
which is not the default in case
\fBsystemd\-nspawn\fR
is invoked from the interactive command line\&. Further differences with the defaults are documented along with the various supported options below\&.
.PP
The
\fBmachinectl\fR(1)
tool may be used to execute a number of operations on containers\&. In particular it provides easy\-to\-use commands to run containers as system services using the
systemd\-nspawn@\&.service
template unit file\&.
.PP
Along with each container a settings file with the
\&.nspawn
suffix may exist, containing additional settings to apply when running the container\&. See
\fBsystemd.nspawn\fR(5)
for details\&. Settings files override the default options used by the
systemd\-nspawn@\&.service
template unit file, making it usually unnecessary to alter this template file directly\&.
.PP
Note that
\fBsystemd\-nspawn\fR
will mount file systems private to the container to
/dev/,
/run/
and similar\&. These will not be visible outside of the container, and their contents will be lost when the container exits\&.
.PP
Note that running two
\fBsystemd\-nspawn\fR
containers from the same directory tree will not make processes in them see each other\&. The PID namespace separation of the two containers is complete and the containers will share very few runtime objects except for the underlying file system\&. Use
\fBmachinectl\fR(1)\*(Aqs
\fBlogin\fR
or
\fBshell\fR
commands to request an additional login session in a running container\&.
.PP
\fBsystemd\-nspawn\fR
implements the
\m[blue]\fBContainer Interface\fR\m[]\&\s-2\u[1]\d\s+2
specification\&.
.PP
While running, containers invoked with
\fBsystemd\-nspawn\fR
are registered with the
\fBsystemd-machined\fR(8)
service that keeps track of running containers, and provides programming interfaces to interact with them\&.
.SH "OPTIONS"
.PP
If option
\fB\-b\fR
is specified, the arguments are used as arguments for the init program\&. Otherwise,
\fICOMMAND\fR
specifies the program to launch in the container, and the remaining arguments are used as arguments for this program\&. If
\fB\-\-boot\fR
is not used and no arguments are specified, a shell is launched in the container\&.
.PP
The following options are understood:
.PP
\fB\-q\fR, \fB\-\-quiet\fR
.RS 4
Turns off any status output by the tool itself\&. When this switch is used, the only output from nspawn will be the console output of the container OS itself\&.
.RE
.PP
\fB\-\-settings=\fR\fIMODE\fR
.RS 4
Controls whether
\fBsystemd\-nspawn\fR
shall search for and use additional per\-container settings from
\&.nspawn
files\&. Takes a boolean or the special values
\fBoverride\fR
or
\fBtrusted\fR\&.
.sp
If enabled (the default), a settings file named after the machine (as specified with the
\fB\-\-machine=\fR
setting, or derived from the directory or image file name) with the suffix
\&.nspawn
is searched in
/etc/systemd/nspawn/
and
/run/systemd/nspawn/\&. If it is found there, its settings are read and used\&. If it is not found there, it is subsequently searched in the same directory as the image file or in the immediate parent of the root directory of the container\&. In this case, if the file is found, its settings will be also read and used, but potentially unsafe settings are ignored\&. Note that in both these cases, settings on the command line take precedence over the corresponding settings from loaded
\&.nspawn
files, if both are specified\&. Unsafe settings are considered all settings that elevate the container\*(Aqs privileges or grant access to additional resources such as files or directories of the host\&. For details about the format and contents of
\&.nspawn
files, consult
\fBsystemd.nspawn\fR(5)\&.
.sp
If this option is set to
\fBoverride\fR, the file is searched, read and used the same way, however, the order of precedence is reversed: settings read from the
\&.nspawn
file will take precedence over the corresponding command line options, if both are specified\&.
.sp
If this option is set to
\fBtrusted\fR, the file is searched, read and used the same way, but regardless of being found in
/etc/systemd/nspawn/,
/run/systemd/nspawn/
or next to the image file or container root directory, all settings will take effect, however, command line arguments still take precedence over corresponding settings\&.
.sp
If disabled, no
\&.nspawn
file is read and no settings except the ones on the command line are in effect\&.
.RE
.SS "Image Options"
.PP
\fB\-D\fR, \fB\-\-directory=\fR
.RS 4
Directory to use as file system root for the container\&.
.sp
If neither
\fB\-\-directory=\fR, nor
\fB\-\-image=\fR
is specified the directory is determined by searching for a directory named the same as the machine name specified with
\fB\-\-machine=\fR\&. See
\fBmachinectl\fR(1)
section "Files and Directories" for the precise search path\&.
.sp
If neither
\fB\-\-directory=\fR,
\fB\-\-image=\fR, nor
\fB\-\-machine=\fR
are specified, the current directory will be used\&. May not be specified together with
\fB\-\-image=\fR\&.
.RE
.PP
\fB\-\-template=\fR
.RS 4
Directory or
"btrfs"
subvolume to use as template for the container\*(Aqs root directory\&. If this is specified and the container\*(Aqs root directory (as configured by
\fB\-\-directory=\fR) does not yet exist it is created as
"btrfs"
snapshot (if supported) or plain directory (otherwise) and populated from this template tree\&. Ideally, the specified template path refers to the root of a
"btrfs"
subvolume, in which case a simple copy\-on\-write snapshot is taken, and populating the root directory is instant\&. If the specified template path does not refer to the root of a
"btrfs"
subvolume (or not even to a
"btrfs"
file system at all), the tree is copied (though possibly in a \*(Aqreflink\*(Aq copy\-on\-write scheme \(em if the file system supports that), which can be substantially more time\-consuming\&. Note that the snapshot taken is of the specified directory or subvolume, including all subdirectories and subvolumes below it, but excluding any sub\-mounts\&. May not be specified together with
\fB\-\-image=\fR
or
\fB\-\-ephemeral\fR\&.
.sp
Note that this switch leaves hostname, machine ID and all other settings that could identify the instance unmodified\&.
.RE
.PP
\fB\-x\fR, \fB\-\-ephemeral\fR
.RS 4
If specified, the container is run with a temporary snapshot of its file system that is removed immediately when the container terminates\&. May not be specified together with
\fB\-\-template=\fR\&.
.sp
Note that this switch leaves hostname, machine ID and all other settings that could identify the instance unmodified\&. Please note that \(em as with
\fB\-\-template=\fR
\(em taking the temporary snapshot is more efficient on file systems that support subvolume snapshots or \*(Aqreflinks\*(Aq natively ("btrfs"
or new
"xfs") than on more traditional file systems that do not ("ext4")\&. Note that the snapshot taken is of the specified directory or subvolume, including all subdirectories and subvolumes below it, but excluding any sub\-mounts\&.
.sp
With this option no modifications of the container image are retained\&. Use
\fB\-\-volatile=\fR
(described below) for other mechanisms to restrict persistency of container images during runtime\&.
.RE
.PP
\fB\-i\fR, \fB\-\-image=\fR
.RS 4
Disk image to mount the root directory for the container from\&. Takes a path to a regular file or to a block device node\&. The file or block device must contain either:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
An MBR partition table with a single partition of type 0x83 that is marked bootable\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A GUID partition table (GPT) with a single partition of type 0fc63daf\-8483\-4772\-8e79\-3d69d8477de4\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A GUID partition table (GPT) with a marked root partition which is mounted as the root directory of the container\&. Optionally, GPT images may contain a home and/or a server data partition which are mounted to the appropriate places in the container\&. All these partitions must be identified by the partition types defined by the
\m[blue]\fBDiscoverable Partitions Specification\fR\m[]\&\s-2\u[2]\d\s+2\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
No partition table, and a single file system spanning the whole image\&.
.RE
.sp
On GPT images, if an EFI System Partition (ESP) is discovered, it is automatically mounted to
/efi
(or
/boot
as fallback) in case a directory by this name exists and is empty\&.
.sp
Partitions encrypted with LUKS are automatically decrypted\&. Also, on GPT images dm\-verity data integrity hash partitions are set up if the root hash for them is specified using the
\fB\-\-root\-hash=\fR
option\&.
.sp
Single file system images (i\&.e\&. file systems without a surrounding partition table) can be opened using dm\-verity if the integrity data is passed using the
\fB\-\-root\-hash=\fR
and
\fB\-\-verity\-data=\fR
(and optionally
\fB\-\-root\-hash\-sig=\fR) options\&.
.sp
Any other partitions, such as foreign partitions or swap partitions are not mounted\&. May not be specified together with
\fB\-\-directory=\fR,
\fB\-\-template=\fR\&.
.RE
.PP
\fB\-\-oci\-bundle=\fR
.RS 4
Takes the path to an OCI runtime bundle to invoke, as specified in the
\m[blue]\fBOCI Runtime Specification\fR\m[]\&\s-2\u[3]\d\s+2\&. In this case no
\&.nspawn
file is loaded, and the root directory and various settings are read from the OCI runtime JSON data (but data passed on the command line takes precedence)\&.
.RE
.PP
\fB\-\-read\-only\fR
.RS 4
Mount the container\*(Aqs root file system (and any other file systems container in the container image) read\-only\&. This has no effect on additional mounts made with
\fB\-\-bind=\fR,
\fB\-\-tmpfs=\fR
and similar options\&. This mode is implied if the container image file or directory is marked read\-only itself\&. It is also implied if
\fB\-\-volatile=\fR
is used\&. In this case the container image on disk is strictly read\-only, while changes are permitted but kept non\-persistently in memory only\&. For further details, see below\&.
.RE
.PP
\fB\-\-volatile\fR, \fB\-\-volatile=\fR\fIMODE\fR
.RS 4
Boots the container in volatile mode\&. When no mode parameter is passed or when mode is specified as
\fByes\fR, full volatile mode is enabled\&. This means the root directory is mounted as a mostly unpopulated
"tmpfs"
instance, and
/usr/
from the OS tree is mounted into it in read\-only mode (the system thus starts up with read\-only OS image, but pristine state and configuration, any changes are lost on shutdown)\&. When the mode parameter is specified as
\fBstate\fR, the OS tree is mounted read\-only, but
/var/
is mounted as a writable
"tmpfs"
instance into it (the system thus starts up with read\-only OS resources and configuration, but pristine state, and any changes to the latter are lost on shutdown)\&. When the mode parameter is specified as
\fBoverlay\fR
the read\-only root file system is combined with a writable
tmpfs
instance through
"overlayfs", so that it appears at it normally would, but any changes are applied to the temporary file system only and lost when the container is terminated\&. When the mode parameter is specified as
\fBno\fR
(the default), the whole OS tree is made available writable (unless
\fB\-\-read\-only\fR
is specified, see above)\&.
.sp
Note that if one of the volatile modes is chosen, its effect is limited to the root file system (or
/var/
in case of
\fBstate\fR), and any other mounts placed in the hierarchy are unaffected \(em regardless if they are established automatically (e\&.g\&. the EFI system partition that might be mounted to
/efi/
or
/boot/) or explicitly (e\&.g\&. through an additional command line option such as
\fB\-\-bind=\fR, see below)\&. This means, even if
\fB\-\-volatile=overlay\fR
is used changes to
/efi/
or
/boot/
are prohibited in case such a partition exists in the container image operated on, and even if
\fB\-\-volatile=state\fR
is used the hypothetical file
/etc/foobar
is potentially writable if
\fB\-\-bind=/etc/foobar\fR
if used to mount it from outside the read\-only container
/etc/
directory\&.
.sp
The
\fB\-\-ephemeral\fR
option is closely related to this setting, and provides similar behaviour by making a temporary, ephemeral copy of the whole OS image and executing that\&. For further details, see above\&.
.sp
The
\fB\-\-tmpfs=\fR
and
\fB\-\-overlay=\fR
options provide similar functionality, but for specific sub\-directories of the OS image only\&. For details, see below\&.
.sp
This option provides similar functionality for containers as the
"systemd\&.volatile="
kernel command line switch provides for host systems\&. See
\fBkernel-command-line\fR(7)
for details\&.
.sp
Note that setting this option to
\fByes\fR
or
\fBstate\fR
will only work correctly with operating systems in the container that can boot up with only
/usr/
mounted, and are able to automatically populate
/var/
(and
/etc/
in case of
"\-\-volatile=yes")\&. Specifically, this means that operating systems that follow the historic split of
/bin/
and
/lib/
(and related directories) from
/usr/
(i\&.e\&. where the former are not symlinks into the latter) are not supported by
"\-\-volatile=yes"
as container payload\&. The
\fBoverlay\fR
option does not require any particular preparations in the OS, but do note that
"overlayfs"
behaviour differs from regular file systems in a number of ways, and hence compatibility is limited\&.
.RE
.PP
\fB\-\-root\-hash=\fR
.RS 4
Takes a data integrity (dm\-verity) root hash specified in hexadecimal\&. This option enables data integrity checks using dm\-verity, if the used image contains the appropriate integrity data (see above)\&. The specified hash must match the root hash of integrity data, and is usually at least 256 bits (and hence 64 formatted hexadecimal characters) long (in case of SHA256 for example)\&. If this option is not specified, but the image file carries the
"user\&.verity\&.roothash"
extended file attribute (see
\fBxattr\fR(7)), then the root hash is read from it, also as formatted hexadecimal characters\&. If the extended file attribute is not found (or is not supported by the underlying file system), but a file with the
\&.roothash
suffix is found next to the image file, bearing otherwise the same name (except if the image has the
\&.raw
suffix, in which case the root hash file must not have it in its name), the root hash is read from it and automatically used, also as formatted hexadecimal characters\&.
.sp
Note that this configures the root hash for the root file system\&. Disk images may also contain separate file systems for the
/usr/
hierarchy, which may be Verity protected as well\&. The root hash for this protection may be configured via the
"user\&.verity\&.usrhash"
extended file attribute or via a
\&.usrhash
file adjacent to the disk image, following the same format and logic as for the root hash for the root file system described here\&. Note that there\*(Aqs currently no switch to configure the root hash for the
/usr/
from the command line\&.
.sp
Also see the
\fIRootHash=\fR
option in
\fBsystemd.exec\fR(5)\&.
.RE
.PP
\fB\-\-root\-hash\-sig=\fR
.RS 4
Takes a PKCS7 signature of the
\fB\-\-root\-hash=\fR
option\&. The semantics are the same as for the
\fIRootHashSignature=\fR
option, see
\fBsystemd.exec\fR(5)\&.
.RE
.PP
\fB\-\-verity\-data=\fR
.RS 4
Takes the path to a data integrity (dm\-verity) file\&. This option enables data integrity checks using dm\-verity, if a root\-hash is passed and if the used image itself does not contains the integrity data\&. The integrity data must be matched by the root hash\&. If this option is not specified, but a file with the
\&.verity
suffix is found next to the image file, bearing otherwise the same name (except if the image has the
\&.raw
suffix, in which case the verity data file must not have it in its name), the verity data is read from it and automatically used\&.
.RE
.PP
\fB\-\-pivot\-root=\fR
.RS 4
Pivot the specified directory to
/
inside the container, and either unmount the container\*(Aqs old root, or pivot it to another specified directory\&. Takes one of: a path argument \(em in which case the specified path will be pivoted to
/
and the old root will be unmounted; or a colon\-separated pair of new root path and pivot destination for the old root\&. The new root path will be pivoted to
/, and the old
/
will be pivoted to the other directory\&. Both paths must be absolute, and are resolved in the container\*(Aqs file system namespace\&.
.sp
This is for containers which have several bootable directories in them; for example, several
\m[blue]\fBOSTree\fR\m[]\&\s-2\u[4]\d\s+2
deployments\&. It emulates the behavior of the boot loader and initial RAM disk which normally select which directory to mount as the root and start the container\*(Aqs PID 1 in\&.
.RE
.SS "Execution Options"
.PP
\fB\-a\fR, \fB\-\-as\-pid2\fR
.RS 4
Invoke the shell or specified program as process ID (PID) 2 instead of PID 1 (init)\&. By default, if neither this option nor
\fB\-\-boot\fR
is used, the selected program is run as the process with PID 1, a mode only suitable for programs that are aware of the special semantics that the process with PID 1 has on UNIX\&. For example, it needs to reap all processes reparented to it, and should implement
\fBsysvinit\fR
compatible signal handling (specifically: it needs to reboot on SIGINT, reexecute on SIGTERM, reload configuration on SIGHUP, and so on)\&. With
\fB\-\-as\-pid2\fR
a minimal stub init process is run as PID 1 and the selected program is executed as PID 2 (and hence does not need to implement any special semantics)\&. The stub init process will reap processes as necessary and react appropriately to signals\&. It is recommended to use this mode to invoke arbitrary commands in containers, unless they have been modified to run correctly as PID 1\&. Or in other words: this switch should be used for pretty much all commands, except when the command refers to an init or shell implementation, as these are generally capable of running correctly as PID 1\&. This option may not be combined with
\fB\-\-boot\fR\&.
.RE
.PP
\fB\-b\fR, \fB\-\-boot\fR
.RS 4
Automatically search for an init program and invoke it as PID 1, instead of a shell or a user supplied program\&. If this option is used, arguments specified on the command line are used as arguments for the init program\&. This option may not be combined with
\fB\-\-as\-pid2\fR\&.
.sp
The following table explains the different modes of invocation and relationship to
\fB\-\-as\-pid2\fR
(see above):
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&1.\ \&Invocation Mode
.TS
allbox tab(:);
lB lB.
T{
Switch
T}:T{
Explanation
T}
.T&
l l
l l
l l.
T{
Neither \fB\-\-as\-pid2\fR nor \fB\-\-boot\fR specified
T}:T{
The passed parameters are interpreted as the command line, which is executed as PID 1 in the container\&.
T}
T{
\fB\-\-as\-pid2\fR specified
T}:T{
The passed parameters are interpreted as the command line, which is executed as PID 2 in the container\&. A stub init process is run as PID 1\&.
T}
T{
\fB\-\-boot\fR specified
T}:T{
An init program is automatically searched for and run as PID 1 in the container\&. The passed parameters are used as invocation parameters for this process\&.
T}
.TE
.sp 1
Note that
\fB\-\-boot\fR
is the default mode of operation if the
systemd\-nspawn@\&.service
template unit file is used\&.
.RE
.PP
\fB\-\-chdir=\fR
.RS 4
Change to the specified working directory before invoking the process in the container\&. Expects an absolute path in the container\*(Aqs file system namespace\&.
.RE
.PP
\fB\-E \fR\fB\fINAME\fR\fR\fB=\fR\fB\fIVALUE\fR\fR, \fB\-\-setenv=\fR\fB\fINAME\fR\fR\fB=\fR\fB\fIVALUE\fR\fR
.RS 4
Specifies an environment variable assignment to pass to the init process in the container, in the format
"NAME=VALUE"\&. This may be used to override the default variables or to set additional variables\&. This parameter may be used more than once\&.
.RE
.PP
\fB\-u\fR, \fB\-\-user=\fR
.RS 4
After transitioning into the container, change to the specified user defined in the container\*(Aqs user database\&. Like all other systemd\-nspawn features, this is not a security feature and provides protection against accidental destructive operations only\&.
.RE
.PP
\fB\-\-kill\-signal=\fR
.RS 4
Specify the process signal to send to the container\*(Aqs PID 1 when nspawn itself receives
\fBSIGTERM\fR, in order to trigger an orderly shutdown of the container\&. Defaults to
\fBSIGRTMIN+3\fR
if
\fB\-\-boot\fR
is used (on systemd\-compatible init systems
\fBSIGRTMIN+3\fR
triggers an orderly shutdown)\&. If
\fB\-\-boot\fR
is not used and this option is not specified the container\*(Aqs processes are terminated abruptly via
\fBSIGKILL\fR\&. For a list of valid signals, see
\fBsignal\fR(7)\&.
.RE
.PP
\fB\-\-notify\-ready=\fR
.RS 4
Configures support for notifications from the container\*(Aqs init process\&.
\fB\-\-notify\-ready=\fR
takes a boolean (\fBno\fR
and
\fByes\fR)\&. With option
\fBno\fR
systemd\-nspawn notifies systemd with a
"READY=1"
message when the init process is created\&. With option
\fByes\fR
systemd\-nspawn waits for the
"READY=1"
message from the init process in the container before sending its own to systemd\&. For more details about notifications see
\fBsd_notify\fR(3)\&.
.RE
.SS "System Identity Options"
.PP
\fB\-M\fR, \fB\-\-machine=\fR
.RS 4
Sets the machine name for this container\&. This name may be used to identify this container during its runtime (for example in tools like
\fBmachinectl\fR(1)
and similar), and is used to initialize the container\*(Aqs hostname (which the container can choose to override, however)\&. If not specified, the last component of the root directory path of the container is used, possibly suffixed with a random identifier in case
\fB\-\-ephemeral\fR
mode is selected\&. If the root directory selected is the host\*(Aqs root directory the host\*(Aqs hostname is used as default instead\&.
.RE
.PP
\fB\-\-hostname=\fR
.RS 4
Controls the hostname to set within the container, if different from the machine name\&. Expects a valid hostname as argument\&. If this option is used, the kernel hostname of the container will be set to this value, otherwise it will be initialized to the machine name as controlled by the
\fB\-\-machine=\fR
option described above\&. The machine name is used for various aspect of identification of the container from the outside, the kernel hostname configurable with this option is useful for the container to identify itself from the inside\&. It is usually a good idea to keep both forms of identification synchronized, in order to avoid confusion\&. It is hence recommended to avoid usage of this option, and use
\fB\-\-machine=\fR
exclusively\&. Note that regardless whether the container\*(Aqs hostname is initialized from the name set with
\fB\-\-hostname=\fR
or the one set with
\fB\-\-machine=\fR, the container can later override its kernel hostname freely on its own as well\&.
.RE
.PP
\fB\-\-uuid=\fR
.RS 4
Set the specified UUID for the container\&. The init system will initialize
/etc/machine\-id
from this if this file is not set yet\&. Note that this option takes effect only if
/etc/machine\-id
in the container is unpopulated\&.
.RE
.SS "Property Options"
.PP
\fB\-S\fR, \fB\-\-slice=\fR
.RS 4
Make the container part of the specified slice, instead of the default
machine\&.slice\&. This applies only if the machine is run in its own scope unit, i\&.e\&. if
\fB\-\-keep\-unit\fR
isn\*(Aqt used\&.
.RE
.PP
\fB\-\-property=\fR
.RS 4
Set a unit property on the scope unit to register for the machine\&. This applies only if the machine is run in its own scope unit, i\&.e\&. if
\fB\-\-keep\-unit\fR
isn\*(Aqt used\&. Takes unit property assignments in the same format as
\fBsystemctl set\-property\fR\&. This is useful to set memory limits and similar for container\&.
.RE
.PP
\fB\-\-register=\fR
.RS 4
Controls whether the container is registered with
\fBsystemd-machined\fR(8)\&. Takes a boolean argument, which defaults to
"yes"\&. This option should be enabled when the container runs a full Operating System (more specifically: a system and service manager as PID 1), and is useful to ensure that the container is accessible via
\fBmachinectl\fR(1)
and shown by tools such as
\fBps\fR(1)\&. If the container does not run a service manager, it is recommended to set this option to
"no"\&.
.RE
.PP
\fB\-\-keep\-unit\fR
.RS 4
Instead of creating a transient scope unit to run the container in, simply use the service or scope unit
\fBsystemd\-nspawn\fR
has been invoked in\&. If
\fB\-\-register=yes\fR
is set this unit is registered with
\fBsystemd-machined\fR(8)\&. This switch should be used if
\fBsystemd\-nspawn\fR
is invoked from within a service unit, and the service unit\*(Aqs sole purpose is to run a single
\fBsystemd\-nspawn\fR
container\&. This option is not available if run from a user session\&.
.sp
Note that passing
\fB\-\-keep\-unit\fR
disables the effect of
\fB\-\-slice=\fR
and
\fB\-\-property=\fR\&. Use
\fB\-\-keep\-unit\fR
and
\fB\-\-register=no\fR
in combination to disable any kind of unit allocation or registration with
\fBsystemd\-machined\fR\&.
.RE
.SS "User Namespacing Options"
.PP
\fB\-\-private\-users=\fR
.RS 4
Controls user namespacing\&. If enabled, the container will run with its own private set of UNIX user and group ids (UIDs and GIDs)\&. This involves mapping the private UIDs/GIDs used in the container (starting with the container\*(Aqs root user 0 and up) to a range of UIDs/GIDs on the host that are not used for other purposes (usually in the range beyond the host\*(Aqs UID/GID 65536)\&. The parameter may be specified as follows:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
If one or two colon\-separated numbers are specified, user namespacing is turned on\&. The first parameter specifies the first host UID/GID to assign to the container, the second parameter specifies the number of host UIDs/GIDs to assign to the container\&. If the second parameter is omitted, 65536 UIDs/GIDs are assigned\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
If the parameter is omitted, or true, user namespacing is turned on\&. The UID/GID range to use is determined automatically from the file ownership of the root directory of the container\*(Aqs directory tree\&. To use this option, make sure to prepare the directory tree in advance, and ensure that all files and directories in it are owned by UIDs/GIDs in the range you\*(Aqd like to use\&. Also, make sure that used file ACLs exclusively reference UIDs/GIDs in the appropriate range\&. If this mode is used the number of UIDs/GIDs assigned to the container for use is 65536, and the UID/GID of the root directory must be a multiple of 65536\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
If the parameter is false, user namespacing is turned off\&. This is the default\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
The special value
"pick"
turns on user namespacing\&. In this case the UID/GID range is automatically chosen\&. As first step, the file owner of the root directory of the container\*(Aqs directory tree is read, and it is checked that it is currently not used by the system otherwise (in particular, that no other container is using it)\&. If this check is successful, the UID/GID range determined this way is used, similar to the behavior if "yes" is specified\&. If the check is not successful (and thus the UID/GID range indicated in the root directory\*(Aqs file owner is already used elsewhere) a new \(en currently unused \(en UID/GID range of 65536 UIDs/GIDs is randomly chosen between the host UID/GIDs of 524288 and 1878982656, always starting at a multiple of 65536, and, if possible, consistently hashed from the machine name\&. This setting implies
\fB\-\-private\-users\-chown\fR
(see below), which has the effect that the files and directories in the container\*(Aqs directory tree will be owned by the appropriate users of the range picked\&. Using this option makes user namespace behavior fully automatic\&. Note that the first invocation of a previously unused container image might result in picking a new UID/GID range for it, and thus in the (possibly expensive) file ownership adjustment operation\&. However, subsequent invocations of the container will be cheap (unless of course the picked UID/GID range is assigned to a different use by then)\&.
.RE
.sp
It is recommended to assign at least 65536 UIDs/GIDs to each container, so that the usable UID/GID range in the container covers 16 bit\&. For best security, do not assign overlapping UID/GID ranges to multiple containers\&. It is hence a good idea to use the upper 16 bit of the host 32\-bit UIDs/GIDs as container identifier, while the lower 16 bit encode the container UID/GID used\&. This is in fact the behavior enforced by the
\fB\-\-private\-users=pick\fR
option\&.
.sp
When user namespaces are used, the GID range assigned to each container is always chosen identical to the UID range\&.
.sp
In most cases, using
\fB\-\-private\-users=pick\fR
is the recommended option as it enhances container security massively and operates fully automatically in most cases\&.
.sp
Note that the picked UID/GID range is not written to
/etc/passwd
or
/etc/group\&. In fact, the allocation of the range is not stored persistently anywhere, except in the file ownership of the files and directories of the container\&.
.sp
Note that when user namespacing is used file ownership on disk reflects this, and all of the container\*(Aqs files and directories are owned by the container\*(Aqs effective user and group IDs\&. This means that copying files from and to the container image requires correction of the numeric UID/GID values, according to the UID/GID shift applied\&.
.RE
.PP
\fB\-\-private\-users\-chown\fR
.RS 4
If specified, all files and directories in the container\*(Aqs directory tree will be adjusted so that they are owned by the appropriate UIDs/GIDs selected for the container (see above)\&. This operation is potentially expensive, as it involves iterating through the full directory tree of the container\&. Besides actual file ownership, file ACLs are adjusted as well\&.
.sp
This option is implied if
\fB\-\-private\-users=pick\fR
is used\&. This option has no effect if user namespacing is not used\&.
.RE
.PP
\fB\-U\fR
.RS 4
If the kernel supports the user namespaces feature, equivalent to
\fB\-\-private\-users=pick \-\-private\-users\-chown\fR, otherwise equivalent to
\fB\-\-private\-users=no\fR\&.
.sp
Note that
\fB\-U\fR
is the default if the
systemd\-nspawn@\&.service
template unit file is used\&.
.sp
Note: it is possible to undo the effect of
\fB\-\-private\-users\-chown\fR
(or
\fB\-U\fR) on the file system by redoing the operation with the first UID of 0:
.sp
.if n \{\
.RS 4
.\}
.nf
systemd\-nspawn \&... \-\-private\-users=0 \-\-private\-users\-chown
.fi
.if n \{\
.RE
.\}
.RE
.SS "Networking Options"
.PP
\fB\-\-private\-network\fR
.RS 4
Disconnect networking of the container from the host\&. This makes all network interfaces unavailable in the container, with the exception of the loopback device and those specified with
\fB\-\-network\-interface=\fR
and configured with
\fB\-\-network\-veth\fR\&. If this option is specified, the
\fBCAP_NET_ADMIN\fR
capability will be added to the set of capabilities the container retains\&. The latter may be disabled by using
\fB\-\-drop\-capability=\fR\&. If this option is not specified (or implied by one of the options listed below), the container will have full access to the host network\&.
.RE
.PP
\fB\-\-network\-interface=\fR
.RS 4
Assign the specified network interface to the container\&. This will remove the specified interface from the calling namespace and place it in the container\&. When the container terminates, it is moved back to the calling namespace\&. Note that
\fB\-\-network\-interface=\fR
implies
\fB\-\-private\-network\fR\&. This option may be used more than once to add multiple network interfaces to the container\&.
.sp
Note that any network interface specified this way must already exist at the time the container is started\&. If the container shall be started automatically at boot via a
systemd\-nspawn@\&.service
unit file instance, it might hence make sense to add a unit file drop\-in to the service instance (e\&.g\&.
/etc/systemd/system/systemd\-nspawn@foobar\&.service\&.d/50\-network\&.conf) with contents like the following:
.sp
.if n \{\
.RS 4
.\}
.nf
[Unit]
Wants=sys\-subsystem\-net\-devices\-ens1\&.device
After=sys\-subsystem\-net\-devices\-ens1\&.device
.fi
.if n \{\
.RE
.\}
.sp
This will make sure that activation of the container service will be delayed until the
"ens1"
network interface has shown up\&. This is required since hardware probing is fully asynchronous, and network interfaces might be discovered only later during the boot process, after the container would normally be started without these explicit dependencies\&.
.RE
.PP
\fB\-\-network\-macvlan=\fR
.RS 4
Create a
"macvlan"
interface of the specified Ethernet network interface and add it to the container\&. A
"macvlan"
interface is a virtual interface that adds a second MAC address to an existing physical Ethernet link\&. The interface in the container will be named after the interface on the host, prefixed with
"mv\-"\&. Note that
\fB\-\-network\-macvlan=\fR
implies
\fB\-\-private\-network\fR\&. This option may be used more than once to add multiple network interfaces to the container\&.
.sp
As with
\fB\-\-network\-interface=\fR, the underlying Ethernet network interface must already exist at the time the container is started, and thus similar unit file drop\-ins as described above might be useful\&.
.RE
.PP
\fB\-\-network\-ipvlan=\fR
.RS 4
Create an
"ipvlan"
interface of the specified Ethernet network interface and add it to the container\&. An
"ipvlan"
interface is a virtual interface, similar to a
"macvlan"
interface, which uses the same MAC address as the underlying interface\&. The interface in the container will be named after the interface on the host, prefixed with
"iv\-"\&. Note that
\fB\-\-network\-ipvlan=\fR
implies
\fB\-\-private\-network\fR\&. This option may be used more than once to add multiple network interfaces to the container\&.
.sp
As with
\fB\-\-network\-interface=\fR, the underlying Ethernet network interface must already exist at the time the container is started, and thus similar unit file drop\-ins as described above might be useful\&.
.RE
.PP
\fB\-n\fR, \fB\-\-network\-veth\fR
.RS 4
Create a virtual Ethernet link ("veth") between host and container\&. The host side of the Ethernet link will be available as a network interface named after the container\*(Aqs name (as specified with
\fB\-\-machine=\fR), prefixed with
"ve\-"\&. The container side of the Ethernet link will be named
"host0"\&. The
\fB\-\-network\-veth\fR
option implies
\fB\-\-private\-network\fR\&.
.sp
Note that
\fBsystemd-networkd.service\fR(8)
includes by default a network file
/usr/lib/systemd/network/80\-container\-ve\&.network
matching the host\-side interfaces created this way, which contains settings to enable automatic address provisioning on the created virtual link via DHCP, as well as automatic IP routing onto the host\*(Aqs external network interfaces\&. It also contains
/usr/lib/systemd/network/80\-container\-host0\&.network
matching the container\-side interface created this way, containing settings to enable client side address assignment via DHCP\&. In case
systemd\-networkd
is running on both the host and inside the container, automatic IP communication from the container to the host is thus available, with further connectivity to the external network\&.
.sp
Note that
\fB\-\-network\-veth\fR
is the default if the
systemd\-nspawn@\&.service
template unit file is used\&.
.sp
Note that on Linux network interface names may have a length of 15 characters at maximum, while container names may have a length up to 64 characters\&. As this option derives the host\-side interface name from the container name the name is possibly truncated\&. Thus, care needs to be taken to ensure that interface names remain unique in this case, or even better container names are generally not chosen longer than 12 characters, to avoid the truncation\&. If the name is truncated,
\fBsystemd\-nspawn\fR
will automatically append a 4\-digit hash value to the name to reduce the chance of collisions\&. However, the hash algorithm is not collision\-free\&. (See
\fBsystemd.net-naming-scheme\fR(7)
for details on older naming algorithms for this interface)\&. Alternatively, the
\fB\-\-network\-veth\-extra=\fR
option may be used, which allows free configuration of the host\-side interface name independently of the container name \(em but might require a bit more additional configuration in case bridging in a fashion similar to
\fB\-\-network\-bridge=\fR
is desired\&.
.RE
.PP
\fB\-\-network\-veth\-extra=\fR
.RS 4
Adds an additional virtual Ethernet link between host and container\&. Takes a colon\-separated pair of host interface name and container interface name\&. The latter may be omitted in which case the container and host sides will be assigned the same name\&. This switch is independent of
\fB\-\-network\-veth\fR, and \(em in contrast \(em may be used multiple times, and allows configuration of the network interface names\&. Note that
\fB\-\-network\-bridge=\fR
has no effect on interfaces created with
\fB\-\-network\-veth\-extra=\fR\&.
.RE
.PP
\fB\-\-network\-bridge=\fR
.RS 4
Adds the host side of the Ethernet link created with
\fB\-\-network\-veth\fR
to the specified Ethernet bridge interface\&. Expects a valid network interface name of a bridge device as argument\&. Note that
\fB\-\-network\-bridge=\fR
implies
\fB\-\-network\-veth\fR\&. If this option is used, the host side of the Ethernet link will use the
"vb\-"
prefix instead of
"ve\-"\&. Regardless of the used naming prefix the same network interface name length limits imposed by Linux apply, along with the complications this creates (for details see above)\&.
.sp
As with
\fB\-\-network\-interface=\fR, the underlying bridge network interface must already exist at the time the container is started, and thus similar unit file drop\-ins as described above might be useful\&.
.RE
.PP
\fB\-\-network\-zone=\fR
.RS 4
Creates a virtual Ethernet link ("veth") to the container and adds it to an automatically managed Ethernet bridge interface\&. The bridge interface is named after the passed argument, prefixed with
"vz\-"\&. The bridge interface is automatically created when the first container configured for its name is started, and is automatically removed when the last container configured for its name exits\&. Hence, each bridge interface configured this way exists only as long as there\*(Aqs at least one container referencing it running\&. This option is very similar to
\fB\-\-network\-bridge=\fR, besides this automatic creation/removal of the bridge device\&.
.sp
This setting makes it easy to place multiple related containers on a common, virtual Ethernet\-based broadcast domain, here called a "zone"\&. Each container may only be part of one zone, but each zone may contain any number of containers\&. Each zone is referenced by its name\&. Names may be chosen freely (as long as they form valid network interface names when prefixed with
"vz\-"), and it is sufficient to pass the same name to the
\fB\-\-network\-zone=\fR
switch of the various concurrently running containers to join them in one zone\&.
.sp
Note that
\fBsystemd-networkd.service\fR(8)
includes by default a network file
/usr/lib/systemd/network/80\-container\-vz\&.network
matching the bridge interfaces created this way, which contains settings to enable automatic address provisioning on the created virtual network via DHCP, as well as automatic IP routing onto the host\*(Aqs external network interfaces\&. Using
\fB\-\-network\-zone=\fR
is hence in most cases fully automatic and sufficient to connect multiple local containers in a joined broadcast domain to the host, with further connectivity to the external network\&.
.RE
.PP
\fB\-\-network\-namespace\-path=\fR
.RS 4
Takes the path to a file representing a kernel network namespace that the container shall run in\&. The specified path should refer to a (possibly bind\-mounted) network namespace file, as exposed by the kernel below
/proc/$PID/ns/net\&. This makes the container enter the given network namespace\&. One of the typical use cases is to give a network namespace under
/run/netns
created by
\fBip-netns\fR(8), for example,
\fB\-\-network\-namespace\-path=/run/netns/foo\fR\&. Note that this option cannot be used together with other network\-related options, such as
\fB\-\-private\-network\fR
or
\fB\-\-network\-interface=\fR\&.
.RE
.PP
\fB\-p\fR, \fB\-\-port=\fR
.RS 4
If private networking is enabled, maps an IP port on the host onto an IP port on the container\&. Takes a protocol specifier (either
"tcp"
or
"udp"), separated by a colon from a host port number in the range 1 to 65535, separated by a colon from a container port number in the range from 1 to 65535\&. The protocol specifier and its separating colon may be omitted, in which case
"tcp"
is assumed\&. The container port number and its colon may be omitted, in which case the same port as the host port is implied\&. This option is only supported if private networking is used, such as with
\fB\-\-network\-veth\fR,
\fB\-\-network\-zone=\fR
\fB\-\-network\-bridge=\fR\&.
.RE
.SS "Security Options"
.PP
\fB\-\-capability=\fR
.RS 4
List one or more additional capabilities to grant the container\&. Takes a comma\-separated list of capability names, see
\fBcapabilities\fR(7)
for more information\&. Note that the following capabilities will be granted in any way:
\fBCAP_AUDIT_CONTROL\fR,
\fBCAP_AUDIT_WRITE\fR,
\fBCAP_CHOWN\fR,
\fBCAP_DAC_OVERRIDE\fR,
\fBCAP_DAC_READ_SEARCH\fR,
\fBCAP_FOWNER\fR,
\fBCAP_FSETID\fR,
\fBCAP_IPC_OWNER\fR,
\fBCAP_KILL\fR,
\fBCAP_LEASE\fR,
\fBCAP_LINUX_IMMUTABLE\fR,
\fBCAP_MKNOD\fR,
\fBCAP_NET_BIND_SERVICE\fR,
\fBCAP_NET_BROADCAST\fR,
\fBCAP_NET_RAW\fR,
\fBCAP_SETFCAP\fR,
\fBCAP_SETGID\fR,
\fBCAP_SETPCAP\fR,
\fBCAP_SETUID\fR,
\fBCAP_SYS_ADMIN\fR,
\fBCAP_SYS_BOOT\fR,
\fBCAP_SYS_CHROOT\fR,
\fBCAP_SYS_NICE\fR,
\fBCAP_SYS_PTRACE\fR,
\fBCAP_SYS_RESOURCE\fR,
\fBCAP_SYS_TTY_CONFIG\fR\&. Also
\fBCAP_NET_ADMIN\fR
is retained if
\fB\-\-private\-network\fR
is specified\&. If the special value
"all"
is passed, all capabilities are retained\&.
.sp
If the special value of
"help"
is passed, the program will print known capability names and exit\&.
.sp
This option sets the bounding set of capabilities which also limits the ambient capabilities as given with the
\fB\-\-ambient\-capability=\fR\&.
.RE
.PP
\fB\-\-drop\-capability=\fR
.RS 4
Specify one or more additional capabilities to drop for the container\&. This allows running the container with fewer capabilities than the default (see above)\&.
.sp
If the special value of
"help"
is passed, the program will print known capability names and exit\&.
.sp
This option sets the bounding set of capabilities which also limits the ambient capabilities as given with the
\fB\-\-ambient\-capability=\fR\&.
.RE
.PP
\fB\-\-ambient\-capability=\fR
.RS 4
Specify one or more additional capabilities to pass in the inheritable and ambient set to the program started within the container\&. The value
"all"
is not supported for this setting\&.
.sp
All capabilities specified here must be in the set allowed with the
\fB\-\-capability=\fR
and
\fB\-\-drop\-capability=\fR
options\&. Otherwise, an error message will be shown\&.
.sp
This option cannot be combined with the boot mode of the container (as requested via
\fB\-\-boot\fR)\&.
.sp
If the special value of
"help"
is passed, the program will print known capability names and exit\&.
.RE
.PP
\fB\-\-no\-new\-privileges=\fR
.RS 4
Takes a boolean argument\&. Specifies the value of the
\fBPR_SET_NO_NEW_PRIVS\fR
flag for the container payload\&. Defaults to off\&. When turned on the payload code of the container cannot acquire new privileges, i\&.e\&. the "setuid" file bit as well as file system capabilities will not have an effect anymore\&. See
\fBprctl\fR(2)
for details about this flag\&.
.RE
.PP
\fB\-\-system\-call\-filter=\fR
.RS 4
Alter the system call filter applied to containers\&. Takes a space\-separated list of system call names or group names (the latter prefixed with
"@", as listed by the
\fBsyscall\-filter\fR
command of
\fBsystemd-analyze\fR(1))\&. Passed system calls will be permitted\&. The list may optionally be prefixed by
"~", in which case all listed system calls are prohibited\&. If this command line option is used multiple times the configured lists are combined\&. If both a positive and a negative list (that is one system call list without and one with the
"~"
prefix) are configured, the negative list takes precedence over the positive list\&. Note that
\fBsystemd\-nspawn\fR
always implements a system call allow list (as opposed to a deny list!), and this command line option hence adds or removes entries from the default allow list, depending on the
"~"
prefix\&. Note that the applied system call filter is also altered implicitly if additional capabilities are passed using the
\fB\-\-capabilities=\fR\&.
.RE
.PP
\fB\-Z\fR, \fB\-\-selinux\-context=\fR
.RS 4
Sets the SELinux security context to be used to label processes in the container\&.
.RE
.PP
\fB\-L\fR, \fB\-\-selinux\-apifs\-context=\fR
.RS 4
Sets the SELinux security context to be used to label files in the virtual API file systems in the container\&.
.RE
.SS "Resource Options"
.PP
\fB\-\-rlimit=\fR
.RS 4
Sets the specified POSIX resource limit for the container payload\&. Expects an assignment of the form
"\fILIMIT\fR=\fISOFT\fR:\fIHARD\fR"
or
"\fILIMIT\fR=\fIVALUE\fR", where
\fILIMIT\fR
should refer to a resource limit type, such as
\fBRLIMIT_NOFILE\fR
or
\fBRLIMIT_NICE\fR\&. The
\fISOFT\fR
and
\fIHARD\fR
fields should refer to the numeric soft and hard resource limit values\&. If the second form is used,
\fIVALUE\fR
may specify a value that is used both as soft and hard limit\&. In place of a numeric value the special string
"infinity"
may be used to turn off resource limiting for the specific type of resource\&. This command line option may be used multiple times to control limits on multiple limit types\&. If used multiple times for the same limit type, the last use wins\&. For details about resource limits see
\fBsetrlimit\fR(2)\&. By default resource limits for the container\*(Aqs init process (PID 1) are set to the same values the Linux kernel originally passed to the host init system\&. Note that some resource limits are enforced on resources counted per user, in particular
\fBRLIMIT_NPROC\fR\&. This means that unless user namespacing is deployed (i\&.e\&.
\fB\-\-private\-users=\fR
is used, see above), any limits set will be applied to the resource usage of the same user on all local containers as well as the host\&. This means particular care needs to be taken with these limits as they might be triggered by possibly less trusted code\&. Example:
"\-\-rlimit=RLIMIT_NOFILE=8192:16384"\&.
.RE
.PP
\fB\-\-oom\-score\-adjust=\fR
.RS 4
Changes the OOM ("Out Of Memory") score adjustment value for the container payload\&. This controls
/proc/self/oom_score_adj
which influences the preference with which this container is terminated when memory becomes scarce\&. For details see
\fBproc\fR(5)\&. Takes an integer in the range \-1000\&...1000\&.
.RE
.PP
\fB\-\-cpu\-affinity=\fR
.RS 4
Controls the CPU affinity of the container payload\&. Takes a comma separated list of CPU numbers or number ranges (the latter\*(Aqs start and end value separated by dashes)\&. See
\fBsched_setaffinity\fR(2)
for details\&.
.RE
.PP
\fB\-\-personality=\fR
.RS 4
Control the architecture ("personality") reported by
\fBuname\fR(2)
in the container\&. Currently, only
"x86"
and
"x86\-64"
are supported\&. This is useful when running a 32\-bit container on a 64\-bit host\&. If this setting is not used, the personality reported in the container is the same as the one reported on the host\&.
.RE
.SS "Integration Options"
.PP
\fB\-\-resolv\-conf=\fR
.RS 4
Configures how
/etc/resolv\&.conf
inside of the container shall be handled (i\&.e\&. DNS configuration synchronization from host to container)\&. Takes one of
"off",
"copy\-host",
"copy\-static",
"copy\-uplink",
"copy\-stub",
"replace\-host",
"replace\-static",
"replace\-uplink",
"replace\-stub",
"bind\-host",
"bind\-static",
"bind\-uplink",
"bind\-stub",
"delete"
or
"auto"\&.
.sp
If set to
"off"
the
/etc/resolv\&.conf
file in the container is left as it is included in the image, and neither modified nor bind mounted over\&.
.sp
If set to
"copy\-host", the
/etc/resolv\&.conf
file from the host is copied into the container, unless the file exists already and is not a regular file (e\&.g\&. a symlink)\&. Similar, if
"replace\-host"
is used the file is copied, replacing any existing inode, including symlinks\&. Similar, if
"bind\-host"
is used, the file is bind mounted from the host into the container\&.
.sp
If set to
"copy\-static",
"replace\-static"
or
"bind\-static"
the static
resolv\&.conf
file supplied with
\fBsystemd-resolved.service\fR(8)
(specifically:
/usr/lib/systemd/resolv\&.conf) is copied or bind mounted into the container\&.
.sp
If set to
"copy\-uplink",
"replace\-uplink"
or
"bind\-uplink"
the uplink
resolv\&.conf
file managed by
systemd\-resolved\&.service
(specifically:
/run/systemd/resolve/resolv\&.conf) is copied or bind mounted into the container\&.
.sp
If set to
"copy\-stub",
"replace\-stub"
or
"bind\-stub"
the stub
resolv\&.conf
file managed by
systemd\-resolved\&.service
(specifically:
/run/systemd/resolve/stub\-resolv\&.conf) is copied or bind mounted into the container\&.
.sp
If set to
"delete"
the
/etc/resolv\&.conf
file in the container is deleted if it exists\&.
.sp
Finally, if set to
"auto"
the file is left as it is if private networking is turned on (see
\fB\-\-private\-network\fR)\&. Otherwise, if
systemd\-resolved\&.service
is running its stub
resolv\&.conf
file is used, and if not the host\*(Aqs
/etc/resolv\&.conf
file\&. In the latter cases the file is copied if the image is writable, and bind mounted otherwise\&.
.sp
It\*(Aqs recommended to use
"copy\-\&..."
or
"replace\-\&..."
if the container shall be able to make changes to the DNS configuration on its own, deviating from the host\*(Aqs settings\&. Otherwise
"bind"
is preferable, as it means direct changes to
/etc/resolv\&.conf
in the container are not allowed, as it is a read\-only bind mount (but note that if the container has enough privileges, it might simply go ahead and unmount the bind mount anyway)\&. Note that both if the file is bind mounted and if it is copied no further propagation of configuration is generally done after the one\-time early initialization (this is because the file is usually updated through copying and renaming)\&. Defaults to
"auto"\&.
.RE
.PP
\fB\-\-timezone=\fR
.RS 4
Configures how
/etc/localtime
inside of the container (i\&.e\&. local timezone synchronization from host to container) shall be handled\&. Takes one of
"off",
"copy",
"bind",
"symlink",
"delete"
or
"auto"\&. If set to
"off"
the
/etc/localtime
file in the container is left as it is included in the image, and neither modified nor bind mounted over\&. If set to
"copy"
the
/etc/localtime
file of the host is copied into the container\&. Similarly, if
"bind"
is used, the file is bind mounted from the host into the container\&. If set to
"symlink", a symlink is created pointing from
/etc/localtime
in the container to the timezone file in the container that matches the timezone setting on the host\&. If set to
"delete", the file in the container is deleted, should it exist\&. If set to
"auto"
and the
/etc/localtime
file of the host is a symlink, then
"symlink"
mode is used, and
"copy"
otherwise, except if the image is read\-only in which case
"bind"
is used instead\&. Defaults to
"auto"\&.
.RE
.PP
\fB\-\-link\-journal=\fR
.RS 4
Control whether the container\*(Aqs journal shall be made visible to the host system\&. If enabled, allows viewing the container\*(Aqs journal files from the host (but not vice versa)\&. Takes one of
"no",
"host",
"try\-host",
"guest",
"try\-guest",
"auto"\&. If
"no", the journal is not linked\&. If
"host", the journal files are stored on the host file system (beneath
/var/log/journal/\fImachine\-id\fR) and the subdirectory is bind\-mounted into the container at the same location\&. If
"guest", the journal files are stored on the guest file system (beneath
/var/log/journal/\fImachine\-id\fR) and the subdirectory is symlinked into the host at the same location\&.
"try\-host"
and
"try\-guest"
do the same but do not fail if the host does not have persistent journaling enabled\&. If
"auto"
(the default), and the right subdirectory of
/var/log/journal
exists, it will be bind mounted into the container\&. If the subdirectory does not exist, no linking is performed\&. Effectively, booting a container once with
"guest"
or
"host"
will link the journal persistently if further on the default of
"auto"
is used\&.
.sp
Note that
\fB\-\-link\-journal=try\-guest\fR
is the default if the
systemd\-nspawn@\&.service
template unit file is used\&.
.RE
.PP
\fB\-j\fR
.RS 4
Equivalent to
\fB\-\-link\-journal=try\-guest\fR\&.
.RE
.SS "Mount Options"
.PP
\fB\-\-bind=\fR, \fB\-\-bind\-ro=\fR
.RS 4
Bind mount a file or directory from the host into the container\&. Takes one of: a path argument\ \&\(em in which case the specified path will be mounted from the host to the same path in the container, or a colon\-separated pair of paths\ \&\(em in which case the first specified path is the source in the host, and the second path is the destination in the container, or a colon\-separated triple of source path, destination path and mount options\&. The source path may optionally be prefixed with a
"+"
character\&. If so, the source path is taken relative to the image\*(Aqs root directory\&. This permits setting up bind mounts within the container image\&. The source path may be specified as empty string, in which case a temporary directory below the host\*(Aqs
/var/tmp/
directory is used\&. It is automatically removed when the container is shut down\&. Mount options are comma\-separated and currently, only
\fBrbind\fR
and
\fBnorbind\fR
are allowed, controlling whether to create a recursive or a regular bind mount\&. Defaults to "rbind"\&. Backslash escapes are interpreted, so
"\e:"
may be used to embed colons in either path\&. This option may be specified multiple times for creating multiple independent bind mount points\&. The
\fB\-\-bind\-ro=\fR
option creates read\-only bind mounts\&.
.sp
Note that when this option is used in combination with
\fB\-\-private\-users\fR, the resulting mount points will be owned by the
\fBnobody\fR
user\&. That\*(Aqs because the mount and its files and directories continue to be owned by the relevant host users and groups, which do not exist in the container, and thus show up under the wildcard UID 65534 (nobody)\&. If such bind mounts are created, it is recommended to make them read\-only, using
\fB\-\-bind\-ro=\fR\&.
.RE
.PP
\fB\-\-inaccessible=\fR
.RS 4
Make the specified path inaccessible in the container\&. This over\-mounts the specified path (which must exist in the container) with a file node of the same type that is empty and has the most restrictive access mode supported\&. This is an effective way to mask files, directories and other file system objects from the container payload\&. This option may be used more than once in case all specified paths are masked\&.
.RE
.PP
\fB\-\-tmpfs=\fR
.RS 4
Mount a tmpfs file system into the container\&. Takes a single absolute path argument that specifies where to mount the tmpfs instance to (in which case the directory access mode will be chosen as 0755, owned by root/root), or optionally a colon\-separated pair of path and mount option string that is used for mounting (in which case the kernel default for access mode and owner will be chosen, unless otherwise specified)\&. Backslash escapes are interpreted in the path, so
"\e:"
may be used to embed colons in the path\&.
.sp
Note that this option cannot be used to replace the root file system of the container with a temporary file system\&. However, the
\fB\-\-volatile=\fR
option described below provides similar functionality, with a focus on implementing stateless operating system images\&.
.RE
.PP
\fB\-\-overlay=\fR, \fB\-\-overlay\-ro=\fR
.RS 4
Combine multiple directory trees into one overlay file system and mount it into the container\&. Takes a list of colon\-separated paths to the directory trees to combine and the destination mount point\&.
.sp
Backslash escapes are interpreted in the paths, so
"\e:"
may be used to embed colons in the paths\&.
.sp
If three or more paths are specified, then the last specified path is the destination mount point in the container, all paths specified before refer to directory trees on the host and are combined in the specified order into one overlay file system\&. The left\-most path is hence the lowest directory tree, the second\-to\-last path the highest directory tree in the stacking order\&. If
\fB\-\-overlay\-ro=\fR
is used instead of
\fB\-\-overlay=\fR, a read\-only overlay file system is created\&. If a writable overlay file system is created, all changes made to it are written to the highest directory tree in the stacking order, i\&.e\&. the second\-to\-last specified\&.
.sp
If only two paths are specified, then the second specified path is used both as the top\-level directory tree in the stacking order as seen from the host, as well as the mount point for the overlay file system in the container\&. At least two paths have to be specified\&.
.sp
The source paths may optionally be prefixed with
"+"
character\&. If so they are taken relative to the image\*(Aqs root directory\&. The uppermost source path may also be specified as an empty string, in which case a temporary directory below the host\*(Aqs
/var/tmp/
is used\&. The directory is removed automatically when the container is shut down\&. This behaviour is useful in order to make read\-only container directories writable while the container is running\&. For example, use
"\-\-overlay=+/var::/var"
in order to automatically overlay a writable temporary directory on a read\-only
/var/
directory\&.
.sp
For details about overlay file systems, see
\m[blue]\fBoverlayfs\&.txt\fR\m[]\&\s-2\u[5]\d\s+2\&. Note that the semantics of overlay file systems are substantially different from normal file systems, in particular regarding reported device and inode information\&. Device and inode information may change for a file while it is being written to, and processes might see out\-of\-date versions of files at times\&. Note that this switch automatically derives the
"workdir="
mount option for the overlay file system from the top\-level directory tree, making it a sibling of it\&. It is hence essential that the top\-level directory tree is not a mount point itself (since the working directory must be on the same file system as the top\-most directory tree)\&. Also note that the
"lowerdir="
mount option receives the paths to stack in the opposite order of this switch\&.
.sp
Note that this option cannot be used to replace the root file system of the container with an overlay file system\&. However, the
\fB\-\-volatile=\fR
option described above provides similar functionality, with a focus on implementing stateless operating system images\&.
.RE
.SS "Input/Output Options"
.PP
\fB\-\-console=\fR\fIMODE\fR
.RS 4
Configures how to set up standard input, output and error output for the container payload, as well as the
/dev/console
device for the container\&. Takes one of
\fBinteractive\fR,
\fBread\-only\fR,
\fBpassive\fR,
\fBpipe\fR
or
\fBautopipe\fR\&. If
\fBinteractive\fR, a pseudo\-TTY is allocated and made available as
/dev/console
in the container\&. It is then bi\-directionally connected to the standard input and output passed to
\fBsystemd\-nspawn\fR\&.
\fBread\-only\fR
is similar but only the output of the container is propagated and no input from the caller is read\&. If
\fBpassive\fR, a pseudo TTY is allocated, but it is not connected anywhere\&. In
\fBpipe\fR
mode no pseudo TTY is allocated, but the standard input, output and error output file descriptors passed to
\fBsystemd\-nspawn\fR
are passed on \(em as they are \(em to the container payload, see the following paragraph\&. Finally,
\fBautopipe\fR
mode operates like
\fBinteractive\fR
when
\fBsystemd\-nspawn\fR
is invoked on a terminal, and like
\fBpipe\fR
otherwise\&. Defaults to
\fBinteractive\fR
if
\fBsystemd\-nspawn\fR
is invoked from a terminal, and
\fBread\-only\fR
otherwise\&.
.sp
In
\fBpipe\fR
mode,
/dev/console
will not exist in the container\&. This means that the container payload generally cannot be a full init system as init systems tend to require
/dev/console
to be available\&. On the other hand, in this mode container invocations can be used within shell pipelines\&. This is because intermediary pseudo TTYs do not permit independent bidirectional propagation of the end\-of\-file (EOF) condition, which is necessary for shell pipelines to work correctly\&.
\fINote that the \fR\fI\fBpipe\fR\fR\fI mode should be used carefully\fR, as passing arbitrary file descriptors to less trusted container payloads might open up unwanted interfaces for access by the container payload\&. For example, if a passed file descriptor refers to a TTY of some form, APIs such as
\fBTIOCSTI\fR
may be used to synthesize input that might be used for escaping the container\&. Hence
\fBpipe\fR
mode should only be used if the payload is sufficiently trusted or when the standard input/output/error output file descriptors are known safe, for example pipes\&.
.RE
.PP
\fB\-\-pipe\fR, \fB\-P\fR
.RS 4
Equivalent to
\fB\-\-console=pipe\fR\&.
.RE
.SS "Credentials"
.PP
\fB\-\-load\-credential=\fR\fIID\fR:\fIPATH\fR, \fB\-\-set\-credential=\fR\fIID\fR:\fIVALUE\fR
.RS 4
Pass a credential to the container\&. These two options correspond to the
\fILoadCredential=\fR
and
\fISetCredential=\fR
settings in unit files\&. See
\fBsystemd.exec\fR(5)
for details about these concepts, as well as the syntax of the option\*(Aqs arguments\&.
.sp
Note: when
\fBsystemd\-nspawn\fR
runs as systemd system service it can propagate the credentials it received via
\fILoadCredential=\fR/\fISetCredential=\fR
to the container payload\&. A systemd service manager running as PID 1 in the container can further propagate them to the services it itself starts\&. It is thus possible to easily propagate credentials from a parent service manager to a container manager service and from there into its payload\&. This can even be done recursively\&.
.sp
In order to embed binary data into the credential data for
\fB\-\-set\-credential=\fR
use C\-style escaping (i\&.e\&.
"\en"
to embed a newline, or
"\ex00"
to embed a
\fBNUL\fR
byte\&. Note that the invoking shell might already apply unescaping once, hence this might require double escaping!)\&.
.RE
.SS "Other"
.PP
\fB\-\-no\-pager\fR
.RS 4
Do not pipe output into a pager\&.
.RE
.PP
\fB\-h\fR, \fB\-\-help\fR
.RS 4
Print a short help text and exit\&.
.RE
.PP
\fB\-\-version\fR
.RS 4
Print a short version string and exit\&.
.RE
.SH "ENVIRONMENT"
.PP
\fI$SYSTEMD_LOG_LEVEL\fR
.RS 4
The maximum log level of emitted messages (messages with a higher log level, i\&.e\&. less important ones, will be suppressed)\&. Either one of (in order of decreasing importance)
\fBemerg\fR,
\fBalert\fR,
\fBcrit\fR,
\fBerr\fR,
\fBwarning\fR,
\fBnotice\fR,
\fBinfo\fR,
\fBdebug\fR, or an integer in the range 0\&...7\&. See
\fBsyslog\fR(3)
for more information\&.
.RE
.PP
\fI$SYSTEMD_LOG_COLOR\fR
.RS 4
A boolean\&. If true, messages written to the tty will be colored according to priority\&.
.sp
This setting is only useful when messages are written directly to the terminal, because
\fBjournalctl\fR(1)
and other tools that display logs will color messages based on the log level on their own\&.
.RE
.PP
\fI$SYSTEMD_LOG_TIME\fR
.RS 4
A boolean\&. If true, log messages will be prefixed with a timestamp\&.
.sp
This setting is only useful when messages are written directly to the terminal or a file, because
\fBjournalctl\fR(1)
and other tools that display logs will attach timestamps based on the entry metadata on their own\&.
.RE
.PP
\fI$SYSTEMD_LOG_LOCATION\fR
.RS 4
A boolean\&. If true, messages will be prefixed with a filename and line number in the source code where the message originates\&.
.sp
Note that the log location is often attached as metadata to journal entries anyway\&. Including it directly in the message text can nevertheless be convenient when debugging programs\&.
.RE
.PP
\fI$SYSTEMD_LOG_TID\fR
.RS 4
A boolean\&. If true, messages will be prefixed with the current numerical thread ID (TID)\&.
.sp
Note that the this information is attached as metadata to journal entries anyway\&. Including it directly in the message text can nevertheless be convenient when debugging programs\&.
.RE
.PP
\fI$SYSTEMD_LOG_TARGET\fR
.RS 4
The destination for log messages\&. One of
\fBconsole\fR
(log to the attached tty),
\fBconsole\-prefixed\fR
(log to the attached tty but with prefixes encoding the log level and "facility", see
\fBsyslog\fR(3),
\fBkmsg\fR
(log to the kernel circular log buffer),
\fBjournal\fR
(log to the journal),
\fBjournal\-or\-kmsg\fR
(log to the journal if available, and to kmsg otherwise),
\fBauto\fR
(determine the appropriate log target automatically, the default),
\fBnull\fR
(disable log output)\&.
.RE
.PP
\fI$SYSTEMD_PAGER\fR
.RS 4
Pager to use when
\fB\-\-no\-pager\fR
is not given; overrides
\fI$PAGER\fR\&. If neither
\fI$SYSTEMD_PAGER\fR
nor
\fI$PAGER\fR
are set, a set of well\-known pager implementations are tried in turn, including
\fBless\fR(1)
and
\fBmore\fR(1), until one is found\&. If no pager implementation is discovered no pager is invoked\&. Setting this environment variable to an empty string or the value
"cat"
is equivalent to passing
\fB\-\-no\-pager\fR\&.
.RE
.PP
\fI$SYSTEMD_LESS\fR
.RS 4
Override the options passed to
\fBless\fR
(by default
"FRSXMK")\&.
.sp
Users might want to change two options in particular:
.PP
\fBK\fR
.RS 4
This option instructs the pager to exit immediately when
Ctrl+C
is pressed\&. To allow
\fBless\fR
to handle
Ctrl+C
itself to switch back to the pager command prompt, unset this option\&.
.sp
If the value of
\fI$SYSTEMD_LESS\fR
does not include
"K", and the pager that is invoked is
\fBless\fR,
Ctrl+C
will be ignored by the executable, and needs to be handled by the pager\&.
.RE
.PP
\fBX\fR
.RS 4
This option instructs the pager to not send termcap initialization and deinitialization strings to the terminal\&. It is set by default to allow command output to remain visible in the terminal even after the pager exits\&. Nevertheless, this prevents some pager functionality from working, in particular paged output cannot be scrolled with the mouse\&.
.RE
.sp
See
\fBless\fR(1)
for more discussion\&.
.RE
.PP
\fI$SYSTEMD_LESSCHARSET\fR
.RS 4
Override the charset passed to
\fBless\fR
(by default
"utf\-8", if the invoking terminal is determined to be UTF\-8 compatible)\&.
.RE
.PP
\fI$SYSTEMD_PAGERSECURE\fR
.RS 4
Takes a boolean argument\&. When true, the "secure" mode of the pager is enabled; if false, disabled\&. If
\fI$SYSTEMD_PAGERSECURE\fR
is not set at all, secure mode is enabled if the effective UID is not the same as the owner of the login session, see
\fBgeteuid\fR(2)
and
\fBsd_pid_get_owner_uid\fR(3)\&. In secure mode,
\fBLESSSECURE=1\fR
will be set when invoking the pager, and the pager shall disable commands that open or create new files or start new subprocesses\&. When
\fI$SYSTEMD_PAGERSECURE\fR
is not set at all, pagers which are not known to implement secure mode will not be used\&. (Currently only
\fBless\fR(1)
implements secure mode\&.)
.sp
Note: when commands are invoked with elevated privileges, for example under
\fBsudo\fR(8)
or
\fBpkexec\fR(1), care must be taken to ensure that unintended interactive features are not enabled\&. "Secure" mode for the pager may be enabled automatically as describe above\&. Setting
\fISYSTEMD_PAGERSECURE=0\fR
or not removing it from the inherited environment allows the user to invoke arbitrary commands\&. Note that if the
\fI$SYSTEMD_PAGER\fR
or
\fI$PAGER\fR
variables are to be honoured,
\fI$SYSTEMD_PAGERSECURE\fR
must be set too\&. It might be reasonable to completely disable the pager using
\fB\-\-no\-pager\fR
instead\&.
.RE
.PP
\fI$SYSTEMD_COLORS\fR
.RS 4
Takes a boolean argument\&. When true,
\fBsystemd\fR
and related utilities will use colors in their output, otherwise the output will be monochrome\&. Additionally, the variable can take one of the following special values:
"16",
"256"
to restrict the use of colors to the base 16 or 256 ANSI colors, respectively\&. This can be specified to override the automatic decision based on
\fI$TERM\fR
and what the console is connected to\&.
.RE
.PP
\fI$SYSTEMD_URLIFY\fR
.RS 4
The value must be a boolean\&. Controls whether clickable links should be generated in the output for terminal emulators supporting this\&. This can be specified to override the decision that
\fBsystemd\fR
makes based on
\fI$TERM\fR
and other conditions\&.
.RE
.SH "EXAMPLES"
.PP
\fBExample\ \&1.\ \&Download a Fedora image and start a shell in it\fR
.sp
.if n \{\
.RS 4
.\}
.nf
# machinectl pull\-raw \-\-verify=no \e
      https://download\&.fedoraproject\&.org/pub/fedora/linux/releases/33/Cloud/x86_64/images/Fedora\-Cloud\-Base\-33\-1\&.2\&.x86_64\&.raw\&.xz \e
      Fedora\-Cloud\-Base\-33\-1\&.2\&.x86\-64
# systemd\-nspawn \-M Fedora\-Cloud\-Base\-33\-1\&.2\&.x86\-64
.fi
.if n \{\
.RE
.\}
.PP
This downloads an image using
\fBmachinectl\fR(1)
and opens a shell in it\&.
.PP
\fBExample\ \&2.\ \&Build and boot a minimal Fedora distribution in a container\fR
.sp
.if n \{\
.RS 4
.\}
.nf
# dnf \-y \-\-releasever=33 \-\-installroot=/var/lib/machines/f33 \e
      \-\-disablerepo=\*(Aq*\*(Aq \-\-enablerepo=fedora \-\-enablerepo=updates install \e
      systemd passwd dnf fedora\-release vim\-minimal glibc\-minimal\-langpack
# systemd\-nspawn \-bD /var/lib/machines/f33
.fi
.if n \{\
.RE
.\}
.PP
This installs a minimal Fedora distribution into the directory
/var/lib/machines/f33
and then boots that OS in a namespace container\&. Because the installation is located underneath the standard
/var/lib/machines/
directory, it is also possible to start the machine using
\fBsystemd\-nspawn \-M f33\fR\&.
.PP
\fBExample\ \&3.\ \&Spawn a shell in a container of a minimal Debian unstable distribution\fR
.sp
.if n \{\
.RS 4
.\}
.nf
# debootstrap unstable ~/debian\-tree/
# systemd\-nspawn \-D ~/debian\-tree/
.fi
.if n \{\
.RE
.\}
.PP
This installs a minimal Debian unstable distribution into the directory
~/debian\-tree/
and then spawns a shell from this image in a namespace container\&.
.PP
\fBdebootstrap\fR
supports
\m[blue]\fBDebian\fR\m[]\&\s-2\u[7]\d\s+2,
\m[blue]\fBUbuntu\fR\m[]\&\s-2\u[8]\d\s+2, and
\m[blue]\fBTanglu\fR\m[]\&\s-2\u[9]\d\s+2
out of the box, so the same command can be used to install any of those\&. For other distributions from the Debian family, a mirror has to be specified, see
\fBdebootstrap\fR(8)\&.
.PP
\fBExample\ \&4.\ \&Boot a minimal Arch Linux distribution in a container\fR
.sp
.if n \{\
.RS 4
.\}
.nf
# pacstrap \-c ~/arch\-tree/ base
# systemd\-nspawn \-bD ~/arch\-tree/
.fi
.if n \{\
.RE
.\}
.PP
This installs a minimal Arch Linux distribution into the directory
~/arch\-tree/
and then boots an OS in a namespace container in it\&.
.PP
\fBExample\ \&5.\ \&Install the OpenSUSE Tumbleweed rolling distribution\fR
.sp
.if n \{\
.RS 4
.\}
.nf
# zypper \-\-root=/var/lib/machines/tumbleweed ar \-c \e
      https://download\&.opensuse\&.org/tumbleweed/repo/oss tumbleweed
# zypper \-\-root=/var/lib/machines/tumbleweed refresh
# zypper \-\-root=/var/lib/machines/tumbleweed install \-\-no\-recommends \e
      systemd shadow zypper openSUSE\-release vim
# systemd\-nspawn \-M tumbleweed passwd root
# systemd\-nspawn \-M tumbleweed \-b
.fi
.if n \{\
.RE
.\}
.PP
\fBExample\ \&6.\ \&Boot into an ephemeral snapshot of the host system\fR
.sp
.if n \{\
.RS 4
.\}
.nf
# systemd\-nspawn \-D / \-xb
.fi
.if n \{\
.RE
.\}
.PP
This runs a copy of the host system in a snapshot which is removed immediately when the container exits\&. All file system changes made during runtime will be lost on shutdown, hence\&.
.PP
\fBExample\ \&7.\ \&Run a container with SELinux sandbox security contexts\fR
.sp
.if n \{\
.RS 4
.\}
.nf
# chcon system_u:object_r:svirt_sandbox_file_t:s0:c0,c1 \-R /srv/container
# systemd\-nspawn \-L system_u:object_r:svirt_sandbox_file_t:s0:c0,c1 \e
      \-Z system_u:system_r:svirt_lxc_net_t:s0:c0,c1 \-D /srv/container /bin/sh
.fi
.if n \{\
.RE
.\}
.PP
\fBExample\ \&8.\ \&Run a container with an OSTree deployment\fR
.sp
.if n \{\
.RS 4
.\}
.nf
# systemd\-nspawn \-b \-i ~/image\&.raw \e
      \-\-pivot\-root=/ostree/deploy/$OS/deploy/$CHECKSUM:/sysroot \e
      \-\-bind=+/sysroot/ostree/deploy/$OS/var:/var
.fi
.if n \{\
.RE
.\}
.SH "EXIT STATUS"
.PP
The exit code of the program executed in the container is returned\&.
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsystemd.nspawn\fR(5),
\fBchroot\fR(1),
\fBdnf\fR(8),
\fBdebootstrap\fR(8),
\fBpacman\fR(8),
\fBzypper\fR(8),
\fBsystemd.slice\fR(5),
\fBmachinectl\fR(1),
\fBbtrfs\fR(8)
.SH "NOTES"
.IP " 1." 4
Container Interface
.RS 4
\%https://systemd.io/CONTAINER_INTERFACE
.RE
.IP " 2." 4
Discoverable Partitions Specification
.RS 4
\%https://systemd.io/DISCOVERABLE_PARTITIONS
.RE
.IP " 3." 4
OCI Runtime Specification
.RS 4
\%https://github.com/opencontainers/runtime-spec/blob/master/spec.md
.RE
.IP " 4." 4
OSTree
.RS 4
\%https://ostree.readthedocs.io/en/latest/
.RE
.IP " 5." 4
overlayfs.txt
.RS 4
\%https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt
.RE
.IP " 6." 4
Fedora
.RS 4
\%https://getfedora.org
.RE
.IP " 7." 4
Debian
.RS 4
\%https://www.debian.org
.RE
.IP " 8." 4
Ubuntu
.RS 4
\%https://www.ubuntu.com
.RE
.IP " 9." 4
Tanglu
.RS 4
\%https://www.tanglu.org
.RE
.IP "10." 4
Arch Linux
.RS 4
\%https://www.archlinux.org
.RE
.IP "11." 4
OpenSUSE Tumbleweed
.RS 4
\%https://software.opensuse.org/distributions/tumbleweed
.RE
