'\" t
.TH "SD_JOURNAL_GET_CURSOR" "3" "" "systemd 248" "sd_journal_get_cursor"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
sd_journal_get_cursor, sd_journal_test_cursor \- Get cursor string for or test cursor string against the current journal entry
.SH "SYNOPSIS"
.sp
.ft B
.nf
#include <systemd/sd\-journal\&.h>
.fi
.ft
.HP \w'int\ sd_journal_get_cursor('u
.BI "int sd_journal_get_cursor(sd_journal\ *" "j" ", char\ **" "cursor" ");"
.HP \w'int\ sd_journal_test_cursor('u
.BI "int sd_journal_test_cursor(sd_journal\ *" "j" ", const\ char\ *" "cursor" ");"
.SH "DESCRIPTION"
.PP
\fBsd_journal_get_cursor()\fR
returns a cursor string for the current journal entry\&. A cursor is a serialization of the current journal position formatted as text\&. The string only contains printable characters and can be passed around in text form\&. The cursor identifies a journal entry globally and in a stable way and may be used to later seek to it via
\fBsd_journal_seek_cursor\fR(3)\&. The cursor string should be considered opaque and not be parsed by clients\&. Seeking to a cursor position without the specific entry being available locally will seek to the next closest (in terms of time) available entry\&. The call takes two arguments: a journal context object and a pointer to a string pointer where the cursor string will be placed\&. The string is allocated via libc
\fBmalloc\fR(3)
and should be freed after use with
\fBfree\fR(3)\&.
.PP
Note that
\fBsd_journal_get_cursor()\fR
will not work before
\fBsd_journal_next\fR(3)
(or related call) has been called at least once, in order to position the read pointer at a valid entry\&.
.PP
\fBsd_journal_test_cursor()\fR
may be used to check whether the current position in the journal matches the specified cursor\&. This is useful since cursor strings do not uniquely identify an entry: the same entry might be referred to by multiple different cursor strings, and hence string comparing cursors is not possible\&. Use this call to verify after an invocation of
\fBsd_journal_seek_cursor\fR(3)
whether the entry being sought to was actually found in the journal or the next closest entry was used instead\&.
.SH "RETURN VALUE"
.PP
\fBsd_journal_get_cursor()\fR
returns 0 on success or a negative errno\-style error code\&.
\fBsd_journal_test_cursor()\fR
returns positive if the current entry matches the specified cursor, 0 if it does not match the specified cursor or a negative errno\-style error code on failure\&.
.SH "NOTES"
.PP
All functions listed here are thread\-agnostic and only a single specific thread may operate on a given object during its entire lifetime\&. It\*(Aqs safe to allocate multiple independent objects and use each from a specific thread in parallel\&. However, it\*(Aqs not safe to allocate such an object in one thread, and operate or free it from any other, even if locking is used to ensure these threads don\*(Aqt operate on it at the very same time\&.
.PP
These APIs are implemented as a shared library, which can be compiled and linked to with the
\fBlibsystemd\fR\ \&\fBpkg-config\fR(1)
file\&.
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsd-journal\fR(3),
\fBsd_journal_open\fR(3),
\fBsd_journal_seek_cursor\fR(3)
