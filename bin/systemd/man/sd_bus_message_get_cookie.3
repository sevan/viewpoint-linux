'\" t
.TH "SD_BUS_MESSAGE_GET_COOKIE" "3" "" "systemd 248" "sd_bus_message_get_cookie"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
sd_bus_message_get_cookie, sd_bus_message_get_reply_cookie \- Returns the transaction cookie of a message
.SH "SYNOPSIS"
.sp
.ft B
.nf
#include <systemd/sd\-bus\&.h>
.fi
.ft
.HP \w'int\ sd_bus_message_get_cookie('u
.BI "int sd_bus_message_get_cookie(sd_bus_message\ *" "message" ", uint64_t\ *" "cookie" ");"
.HP \w'int\ sd_bus_message_get_reply_cookie('u
.BI "int sd_bus_message_get_reply_cookie(sd_bus_message\ *" "message" ", uint64_t\ *" "cookie" ");"
.SH "DESCRIPTION"
.PP
\fBsd_bus_message_get_cookie()\fR
returns the transaction cookie of a message\&. The cookie uniquely identifies a message within each bus peer, but is not globally unique\&. It is assigned when a message is sent\&.
.PP
\fBsd_bus_message_get_reply_cookie()\fR
returns the transaction cookie of the message the specified message is a response to\&. When a reply message is generated for a method call message, its cookie is copied over into this field\&. Note that while every message that is transferred is identified by a cookie, only response messages carry a reply cookie field\&.
.PP
Both functions take a message object as first parameter and a place to store the 64\-bit cookie in\&.
.SH "RETURN VALUE"
.PP
On success, these calls return 0 or a positive integer\&. On failure, they return a negative errno\-style error code\&.
.PP
On success, the cookie/reply cookie is returned in the specified 64\-bit unsigned integer variable\&.
.SS "Errors"
.PP
Returned errors may indicate the following problems:
.PP
\fB\-EINVAL\fR
.RS 4
A specified parameter is invalid\&.
.RE
.PP
\fB\-ENODATA\fR
.RS 4
No cookie has been assigned to this message\&. This either indicates that the message has not been sent yet and hence has no cookie assigned, or that the message is not a method response message and hence carries a reply cookie field\&.
.RE
.SH "NOTES"
.PP
These APIs are implemented as a shared library, which can be compiled and linked to with the
\fBlibsystemd\fR\ \&\fBpkg-config\fR(1)
file\&.
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsd-bus\fR(3),
\fBsd_bus_new\fR(3)
