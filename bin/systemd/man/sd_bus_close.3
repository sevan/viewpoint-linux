'\" t
.TH "SD_BUS_CLOSE" "3" "" "systemd 248" "sd_bus_close"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
sd_bus_close, sd_bus_flush, sd_bus_default_flush_close \- Close and flush a bus connection
.SH "SYNOPSIS"
.sp
.ft B
.nf
#include <systemd/sd\-bus\&.h>
.fi
.ft
.HP \w'void\ sd_bus_close('u
.BI "void sd_bus_close(sd_bus\ *" "bus" ");"
.HP \w'int\ sd_bus_flush('u
.BI "int sd_bus_flush(sd_bus\ *" "bus" ");"
.HP \w'void\ sd_bus_default_flush_close('u
.BI "void sd_bus_default_flush_close(void);"
.SH "DESCRIPTION"
.PP
\fBsd_bus_close()\fR
disconnects the specified bus connection\&. When this call is invoked and the specified bus object refers to an active connection it is immediately terminated\&. No further messages may be sent or received on it\&. Any messages queued in the bus object (both incoming and outgoing) are released\&. If invoked on
\fBNULL\fR
bus object or when the bus connection is already closed this function executes no operation\&. This call does not free or unreference the bus object itself\&. Use
\fBsd_bus_unref\fR(3)
for that\&.
.PP
\fBsd_bus_flush()\fR
synchronously writes out all outgoing queued message on a bus connection if there are any\&. This function call may block if the peer is not processing bus messages quickly\&.
.PP
Before a program exits it is usually a good idea to flush any pending messages with
\fBsd_bus_flush()\fR
and then close connections with
\fBsd_bus_close()\fR
to ensure that no unwritten messages are lost, no further messages may be queued and all incoming but unprocessed messages are released\&. After both operations have been done, it is a good idea to also drop any remaining references to the bus object so that it may be freed\&. Since these three operations are frequently done together a helper call
\fBsd_bus_flush_close_unref\fR(3)
is provided that combines them into one\&.
.PP
\fBsd_bus_default_flush_close()\fR
is similar to
\fBsd_bus_flush_close_unref()\fR, but does not take a bus pointer argument and instead iterates over any of the "default" buses opened by
\fBsd_bus_default\fR(3),
\fBsd_bus_default_user\fR(3),
\fBsd_bus_default_system\fR(3), and similar calls\&.
\fBsd_bus_default_flush_close()\fR
is particularly useful to clean up any buses opened using those calls before the program exits\&.
.SH "RETURN VALUE"
.PP
On success,
\fBsd_bus_flush()\fR
returns a non\-negative integer\&. On failure, it returns a negative errno\-style error code\&.
.SS "Errors"
.PP
Returned errors may indicate the following problems:
.PP
\fB\-ECHILD\fR
.RS 4
The bus connection has been created in a different process\&.
.RE
.SH "NOTES"
.PP
These APIs are implemented as a shared library, which can be compiled and linked to with the
\fBlibsystemd\fR\ \&\fBpkg-config\fR(1)
file\&.
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsd-bus\fR(3),
\fBsd_bus_unref\fR(3),
\fBsd_bus_set_close_on_exit\fR(3)
